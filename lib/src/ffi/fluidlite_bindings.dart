// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to FluidLite C library
class FluidLiteBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FluidLiteBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FluidLiteBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>,
              ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  /// *
  /// Math Functions                                *
  /// *
  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nan(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  /// Apple extensions to the C standard                                        *
  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  __float2 __sincosf_stret(
    double arg0,
  ) {
    return ___sincosf_stret(
      arg0,
    );
  }

  late final ___sincosf_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincosf_stret');
  late final ___sincosf_stret =
      ___sincosf_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincos_stret(
    double arg0,
  ) {
    return ___sincos_stret(
      arg0,
    );
  }

  late final ___sincos_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincos_stret');
  late final ___sincos_stret =
      ___sincos_stretPtr.asFunction<__double2 Function(double)>();

  __float2 __sincospif_stret(
    double arg0,
  ) {
    return ___sincospif_stret(
      arg0,
    );
  }

  late final ___sincospif_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincospif_stret');
  late final ___sincospif_stret =
      ___sincospif_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincospi_stret(
    double arg0,
  ) {
    return ___sincospi_stret(
      arg0,
    );
  }

  late final ___sincospi_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincospi_stret');
  late final ___sincospi_stret =
      ___sincospi_stretPtr.asFunction<__double2 Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, filesec_t)>();

  int open_dprotected_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_dprotected_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _openat_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _openat_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('openat_dprotected_np');
  late final _openat_dprotected_np = _openat_dprotected_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_authenticated_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _openat_authenticated_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _openat_authenticated_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('openat_authenticated_np');
  late final _openat_authenticated_np = _openat_authenticated_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int flock1(
    int arg0,
    int arg1,
  ) {
    return _flock1(
      arg0,
      arg1,
    );
  }

  late final _flock1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('flock');
  late final _flock1 = _flock1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr =
      _lookup<ffi.NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init =
      _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr =
      _lookup<ffi.NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup =
      _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free =
      _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>)>>('filesec_query_property');
  late final _filesec_query_property = _filesec_query_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    filesec_property_t arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1.value,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(filesec_t, ffi.UnsignedInt)>>(
          'filesec_unset_property');
  late final _filesec_unset_property =
      _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  ffi.Pointer<fluid_settings_t> new_fluid_settings() {
    return _new_fluid_settings();
  }

  late final _new_fluid_settingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_settings_t> Function()>>(
          'new_fluid_settings');
  late final _new_fluid_settings = _new_fluid_settingsPtr
      .asFunction<ffi.Pointer<fluid_settings_t> Function()>();

  void delete_fluid_settings(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _delete_fluid_settings(
      settings,
    );
  }

  late final _delete_fluid_settingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_settings_t>)>>(
      'delete_fluid_settings');
  late final _delete_fluid_settings = _delete_fluid_settingsPtr
      .asFunction<void Function(ffi.Pointer<fluid_settings_t>)>();

  int fluid_settings_get_type(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_get_type(
      settings,
      name,
    );
  }

  late final _fluid_settings_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_get_type');
  late final _fluid_settings_get_type = _fluid_settings_get_typePtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_settings_get_hints(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_get_hints(
      settings,
      name,
    );
  }

  late final _fluid_settings_get_hintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_get_hints');
  late final _fluid_settings_get_hints =
      _fluid_settings_get_hintsPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  /// Returns whether the setting is changeable in real-time.
  int fluid_settings_is_realtime(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_is_realtime(
      settings,
      name,
    );
  }

  late final _fluid_settings_is_realtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_is_realtime');
  late final _fluid_settings_is_realtime =
      _fluid_settings_is_realtimePtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_settings_setstr(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _fluid_settings_setstr(
      settings,
      name,
      str,
    );
  }

  late final _fluid_settings_setstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_setstr');
  late final _fluid_settings_setstr = _fluid_settings_setstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Get the value of a string setting. If the value does not exists,
  /// 'str' is set to NULL. Otherwise, 'str' will point to the
  /// value. The application does not own the returned value. Instead,
  /// the application should make a copy of the value if it needs it
  /// later.
  ///
  /// \returns 1 if the value exists, 0 otherwise
  int fluid_settings_getstr(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
  ) {
    return _fluid_settings_getstr(
      settings,
      name,
      str,
    );
  }

  late final _fluid_settings_getstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fluid_settings_getstr');
  late final _fluid_settings_getstr = _fluid_settings_getstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Get the default value of a string setting.
  ffi.Pointer<ffi.Char> fluid_settings_getstr_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_getstr_default(
      settings,
      name,
    );
  }

  late final _fluid_settings_getstr_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_getstr_default');
  late final _fluid_settings_getstr_default =
      _fluid_settings_getstr_defaultPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  /// Get the value of a numeric setting.
  ///
  /// \returns 1 if the value exists and is equal to 'value', 0
  /// otherwise
  int fluid_settings_str_equal(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _fluid_settings_str_equal(
      settings,
      name,
      value,
    );
  }

  late final _fluid_settings_str_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_str_equal');
  late final _fluid_settings_str_equal =
      _fluid_settings_str_equalPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_settings_setnum(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    double val,
  ) {
    return _fluid_settings_setnum(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_setnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('fluid_settings_setnum');
  late final _fluid_settings_setnum = _fluid_settings_setnumPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>, double)>();

  /// returns 1 if the value exists, 0 otherwise
  int fluid_settings_getnum(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _fluid_settings_getnum(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_settings_getnum');
  late final _fluid_settings_getnum = _fluid_settings_getnumPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Double>)>();

  /// Get the default value of a string setting.
  double fluid_settings_getnum_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_getnum_default(
      settings,
      name,
    );
  }

  late final _fluid_settings_getnum_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_getnum_default');
  late final _fluid_settings_getnum_default =
      _fluid_settings_getnum_defaultPtr.asFunction<
          double Function(
              ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  /// Get the range of values of a numeric settings.
  void fluid_settings_getnum_range(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> min,
    ffi.Pointer<ffi.Double> max,
  ) {
    return _fluid_settings_getnum_range(
      settings,
      name,
      min,
      max,
    );
  }

  late final _fluid_settings_getnum_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('fluid_settings_getnum_range');
  late final _fluid_settings_getnum_range =
      _fluid_settings_getnum_rangePtr.asFunction<
          void Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_settings_setint(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    int val,
  ) {
    return _fluid_settings_setint(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_setintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_settings_setint');
  late final _fluid_settings_setint = _fluid_settings_setintPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>, int)>();

  /// returns 1 if the value exists, 0 otherwise
  int fluid_settings_getint(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _fluid_settings_getint(
      settings,
      name,
      val,
    );
  }

  late final _fluid_settings_getintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_getint');
  late final _fluid_settings_getint = _fluid_settings_getintPtr.asFunction<
      int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  /// Get the default value of a string setting.
  int fluid_settings_getint_default(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_settings_getint_default(
      settings,
      name,
    );
  }

  late final _fluid_settings_getint_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_settings_getint_default');
  late final _fluid_settings_getint_default =
      _fluid_settings_getint_defaultPtr.asFunction<
          int Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>)>();

  /// Get the range of values of a numeric settings.
  void fluid_settings_getint_range(
    ffi.Pointer<fluid_settings_t> settings,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> min,
    ffi.Pointer<ffi.Int> max,
  ) {
    return _fluid_settings_getint_range(
      settings,
      name,
      min,
      max,
    );
  }

  late final _fluid_settings_getint_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_settings_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_settings_getint_range');
  late final _fluid_settings_getint_range =
      _fluid_settings_getint_rangePtr.asFunction<
          void Function(ffi.Pointer<fluid_settings_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  /// Creates a new synthesizer object.
  ///
  /// Creates a new synthesizer object. As soon as the synthesizer is
  /// created, it will start playing.
  ///
  /// \param settings a pointer to a settings structure
  /// \return a newly allocated synthesizer or NULL in case of error
  ffi.Pointer<fluid_synth_t> new_fluid_synth(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _new_fluid_synth(
      settings,
    );
  }

  late final _new_fluid_synthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_synth_t> Function(
              ffi.Pointer<fluid_settings_t>)>>('new_fluid_synth');
  late final _new_fluid_synth = _new_fluid_synthPtr.asFunction<
      ffi.Pointer<fluid_synth_t> Function(ffi.Pointer<fluid_settings_t>)>();

  void fluid_synth_set_sample_rate(
    ffi.Pointer<fluid_synth_t> synth,
    double sample_rate,
  ) {
    return _fluid_synth_set_sample_rate(
      synth,
      sample_rate,
    );
  }

  late final _fluid_synth_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Float)>>('fluid_synth_set_sample_rate');
  late final _fluid_synth_set_sample_rate = _fluid_synth_set_sample_ratePtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, double)>();

  /// Deletes the synthesizer previously created with new_fluid_synth.
  ///
  /// \param synth the synthesizer object
  /// \return 0 if no error occured, -1 otherwise
  int delete_fluid_synth(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _delete_fluid_synth(
      synth,
    );
  }

  late final _delete_fluid_synthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'delete_fluid_synth');
  late final _delete_fluid_synth = _delete_fluid_synthPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Get a reference to the settings of the synthesizer.
  ///
  /// \param synth the synthesizer object
  /// \return pointer to the settings
  ffi.Pointer<fluid_settings_t> fluid_synth_get_settings(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_settings(
      synth,
    );
  }

  late final _fluid_synth_get_settingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_settings_t> Function(
              ffi.Pointer<fluid_synth_t>)>>('fluid_synth_get_settings');
  late final _fluid_synth_get_settings =
      _fluid_synth_get_settingsPtr.asFunction<
          ffi.Pointer<fluid_settings_t> Function(ffi.Pointer<fluid_synth_t>)>();

  /// Send a noteon message. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_noteon(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
    int vel,
  ) {
    return _fluid_synth_noteon(
      synth,
      chan,
      key,
      vel,
    );
  }

  late final _fluid_synth_noteonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_noteon');
  late final _fluid_synth_noteon = _fluid_synth_noteonPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  /// Send a noteoff message. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_noteoff(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
  ) {
    return _fluid_synth_noteoff(
      synth,
      chan,
      key,
    );
  }

  late final _fluid_synth_noteoffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_noteoff');
  late final _fluid_synth_noteoff = _fluid_synth_noteoffPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Send a control change message. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_cc(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int ctrl,
    int val,
  ) {
    return _fluid_synth_cc(
      synth,
      chan,
      ctrl,
      val,
    );
  }

  late final _fluid_synth_ccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_cc');
  late final _fluid_synth_cc = _fluid_synth_ccPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  /// Get a control value. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_get_cc(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int ctrl,
    ffi.Pointer<ffi.Int> pval,
  ) {
    return _fluid_synth_get_cc(
      synth,
      chan,
      ctrl,
      pval,
    );
  }

  late final _fluid_synth_get_ccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_cc');
  late final _fluid_synth_get_cc = _fluid_synth_get_ccPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, int, int, ffi.Pointer<ffi.Int>)>();

  /// Send a pitch bend message. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_pitch_bend(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_pitch_bend(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_pitch_bendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_pitch_bend');
  late final _fluid_synth_pitch_bend = _fluid_synth_pitch_bendPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Get the pitch bend value. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_get_pitch_bend(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> ppitch_bend,
  ) {
    return _fluid_synth_get_pitch_bend(
      synth,
      chan,
      ppitch_bend,
    );
  }

  late final _fluid_synth_get_pitch_bendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_pitch_bend');
  late final _fluid_synth_get_pitch_bend =
      _fluid_synth_get_pitch_bendPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  /// Set the pitch wheel sensitivity. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_pitch_wheel_sens(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_pitch_wheel_sens(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_pitch_wheel_sensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_pitch_wheel_sens');
  late final _fluid_synth_pitch_wheel_sens = _fluid_synth_pitch_wheel_sensPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Get the pitch wheel sensitivity. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_get_pitch_wheel_sens(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.Int> pval,
  ) {
    return _fluid_synth_get_pitch_wheel_sens(
      synth,
      chan,
      pval,
    );
  }

  late final _fluid_synth_get_pitch_wheel_sensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_get_pitch_wheel_sens');
  late final _fluid_synth_get_pitch_wheel_sens =
      _fluid_synth_get_pitch_wheel_sensPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Int>)>();

  /// Send a program change message. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_program_change(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int program,
  ) {
    return _fluid_synth_program_change(
      synth,
      chan,
      program,
    );
  }

  late final _fluid_synth_program_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_program_change');
  late final _fluid_synth_program_change = _fluid_synth_program_changePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_channel_pressure(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int val,
  ) {
    return _fluid_synth_channel_pressure(
      synth,
      chan,
      val,
    );
  }

  late final _fluid_synth_channel_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_channel_pressure');
  late final _fluid_synth_channel_pressure = _fluid_synth_channel_pressurePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_key_pressure(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
    int val,
  ) {
    return _fluid_synth_key_pressure(
      synth,
      chan,
      key,
      val,
    );
  }

  late final _fluid_synth_key_pressurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_key_pressure');
  late final _fluid_synth_key_pressure = _fluid_synth_key_pressurePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_sysex(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> data,
    int len,
    ffi.Pointer<ffi.Char> response,
    ffi.Pointer<ffi.Int> response_len,
    ffi.Pointer<ffi.Int> handled,
    int dryrun,
  ) {
    return _fluid_synth_sysex(
      synth,
      data,
      len,
      response,
      response_len,
      handled,
      dryrun,
    );
  }

  late final _fluid_synth_sysexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('fluid_synth_sysex');
  late final _fluid_synth_sysex = _fluid_synth_sysexPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          int)>();

  /// Select a bank. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_bank_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int bank,
  ) {
    return _fluid_synth_bank_select(
      synth,
      chan,
      bank,
    );
  }

  late final _fluid_synth_bank_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.UnsignedInt)>>('fluid_synth_bank_select');
  late final _fluid_synth_bank_select = _fluid_synth_bank_selectPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Select a sfont. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_sfont_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int sfont_id,
  ) {
    return _fluid_synth_sfont_select(
      synth,
      chan,
      sfont_id,
    );
  }

  late final _fluid_synth_sfont_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.UnsignedInt)>>('fluid_synth_sfont_select');
  late final _fluid_synth_sfont_select = _fluid_synth_sfont_selectPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Select a preset for a channel. The preset is specified by the
  /// SoundFont ID, the bank number, and the preset number. This
  /// allows any preset to be selected and circumvents preset masking
  /// due to previously loaded SoundFonts on the SoundFont stack.
  ///
  /// \param synth The synthesizer
  /// \param chan The channel on which to set the preset
  /// \param sfont_id The ID of the SoundFont
  /// \param bank_num The bank number
  /// \param preset_num The preset number
  /// \return 0 if no errors occured, -1 otherwise
  int fluid_synth_program_select(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int sfont_id,
    int bank_num,
    int preset_num,
  ) {
    return _fluid_synth_program_select(
      synth,
      chan,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_program_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('fluid_synth_program_select');
  late final _fluid_synth_program_select =
      _fluid_synth_program_selectPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int, int, int)>();

  /// Returns the program, bank, and SoundFont number of the preset on
  /// a given channel. Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_get_program(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    ffi.Pointer<ffi.UnsignedInt> sfont_id,
    ffi.Pointer<ffi.UnsignedInt> bank_num,
    ffi.Pointer<ffi.UnsignedInt> preset_num,
  ) {
    return _fluid_synth_get_program(
      synth,
      chan,
      sfont_id,
      bank_num,
      preset_num,
    );
  }

  late final _fluid_synth_get_programPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('fluid_synth_get_program');
  late final _fluid_synth_get_program = _fluid_synth_get_programPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Send a bank select and a program change to every channel to
  /// reinitialize the preset of the channel. This function is useful
  /// mainly after a SoundFont has been loaded, unloaded or
  /// reloaded. . Returns 0 if no error occurred, -1 otherwise.
  int fluid_synth_program_reset(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_program_reset(
      synth,
    );
  }

  late final _fluid_synth_program_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_program_reset');
  late final _fluid_synth_program_reset = _fluid_synth_program_resetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Send a reset. A reset turns all the notes off and resets the
  /// controller values.
  int fluid_synth_system_reset(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_system_reset(
      synth,
    );
  }

  late final _fluid_synth_system_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_system_reset');
  late final _fluid_synth_system_reset = _fluid_synth_system_resetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Create and start voices using a preset. The id passed as
  /// argument will be used as the voice group id.
  int fluid_synth_start(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
    ffi.Pointer<fluid_preset_t> preset,
    int audio_chan,
    int midi_chan,
    int key,
    int vel,
  ) {
    return _fluid_synth_start(
      synth,
      id,
      preset,
      audio_chan,
      midi_chan,
      key,
      vel,
    );
  }

  late final _fluid_synth_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_preset_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fluid_synth_start');
  late final _fluid_synth_start = _fluid_synth_startPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<fluid_preset_t>,
          int, int, int, int)>();

  /// Stop the voices in the voice group defined by id.
  int fluid_synth_stop(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_stop(
      synth,
      id,
    );
  }

  late final _fluid_synth_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_stop');
  late final _fluid_synth_stop = _fluid_synth_stopPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Set an optional function callback each time a preset has finished loading.
  /// This can be useful when calling fluid_synth_sfload asynchronously.
  /// The function must be formatted like this:
  /// void my_callback_function(int bank, int num, char* name)
  ///
  /// \param callback Pointer to the function
  void fluid_synth_set_preset_callback(
    ffi.Pointer<ffi.Void> callback,
  ) {
    return _fluid_synth_set_preset_callback(
      callback,
    );
  }

  late final _fluid_synth_set_preset_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'fluid_synth_set_preset_callback');
  late final _fluid_synth_set_preset_callback =
      _fluid_synth_set_preset_callbackPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Loads a SoundFont file and creates a new SoundFont. The newly
  /// loaded SoundFont will be put on top of the SoundFont
  /// stack. Presets are searched starting from the SoundFont on the
  /// top of the stack, working the way down the stack until a preset
  /// is found.
  ///
  /// \param synth The synthesizer object
  /// \param filename The file name
  /// \param reset_presets If non-zero, the presets on the channels will be reset
  /// \returns The ID of the loaded SoundFont, or -1 in case of error
  int fluid_synth_sfload(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> filename,
    int reset_presets,
  ) {
    return _fluid_synth_sfload(
      synth,
      filename,
      reset_presets,
    );
  }

  late final _fluid_synth_sfloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_synth_sfload');
  late final _fluid_synth_sfload = _fluid_synth_sfloadPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, int)>();

  /// Reload a SoundFont. The reloaded SoundFont retains its ID and
  /// index on the stack.
  ///
  /// \param synth The synthesizer object
  /// \param id The id of the SoundFont
  /// \returns The ID of the loaded SoundFont, or -1 in case of error
  int fluid_synth_sfreload(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_sfreload(
      synth,
      id,
    );
  }

  late final _fluid_synth_sfreloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_sfreload');
  late final _fluid_synth_sfreload = _fluid_synth_sfreloadPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Removes a SoundFont from the stack and deallocates it.
  ///
  /// \param synth The synthesizer object
  /// \param id The id of the SoundFont
  /// \param reset_presets If TRUE then presets will be reset for all channels
  /// \returns 0 if no error, -1 otherwise
  int fluid_synth_sfunload(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
    int reset_presets,
  ) {
    return _fluid_synth_sfunload(
      synth,
      id,
      reset_presets,
    );
  }

  late final _fluid_synth_sfunloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.UnsignedInt,
              ffi.Int)>>('fluid_synth_sfunload');
  late final _fluid_synth_sfunload = _fluid_synth_sfunloadPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Add a SoundFont. The SoundFont will be put on top of
  /// the SoundFont stack.
  ///
  /// \param synth The synthesizer object
  /// \param sfont The SoundFont
  /// \returns The ID of the loaded SoundFont, or -1 in case of error
  int fluid_synth_add_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_synth_add_sfont(
      synth,
      sfont,
    );
  }

  late final _fluid_synth_add_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfont_t>)>>('fluid_synth_add_sfont');
  late final _fluid_synth_add_sfont = _fluid_synth_add_sfontPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfont_t>)>();

  /// Remove a SoundFont that was previously added using
  /// fluid_synth_add_sfont(). The synthesizer does not delete the
  /// SoundFont; this is responsability of the caller.
  ///
  /// \param synth The synthesizer object
  /// \param sfont The SoundFont
  void fluid_synth_remove_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfont_t> sfont,
  ) {
    return _fluid_synth_remove_sfont(
      synth,
      sfont,
    );
  }

  late final _fluid_synth_remove_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfont_t>)>>('fluid_synth_remove_sfont');
  late final _fluid_synth_remove_sfont =
      _fluid_synth_remove_sfontPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfont_t>)>();

  /// Count the number of loaded SoundFonts.
  ///
  /// \param synth The synthesizer object
  /// \returns The number of loaded SoundFonts
  int fluid_synth_sfcount(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_sfcount(
      synth,
    );
  }

  late final _fluid_synth_sfcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_sfcount');
  late final _fluid_synth_sfcount = _fluid_synth_sfcountPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Get a SoundFont. The SoundFont is specified by its index on the
  /// stack. The top of the stack has index zero.
  ///
  /// \param synth The synthesizer object
  /// \param num The number of the SoundFont (0 <= num < sfcount)
  /// \returns A pointer to the SoundFont
  ffi.Pointer<fluid_sfont_t> fluid_synth_get_sfont(
    ffi.Pointer<fluid_synth_t> synth,
    int num,
  ) {
    return _fluid_synth_get_sfont(
      synth,
      num,
    );
  }

  late final _fluid_synth_get_sfontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_get_sfont');
  late final _fluid_synth_get_sfont = _fluid_synth_get_sfontPtr.asFunction<
      ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Get a SoundFont. The SoundFont is specified by its ID.
  ///
  /// \param synth The synthesizer object
  /// \param id The id of the sfont
  /// \returns A pointer to the SoundFont
  ffi.Pointer<fluid_sfont_t> fluid_synth_get_sfont_by_id(
    ffi.Pointer<fluid_synth_t> synth,
    int id,
  ) {
    return _fluid_synth_get_sfont_by_id(
      synth,
      id,
    );
  }

  late final _fluid_synth_get_sfont_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt)>>('fluid_synth_get_sfont_by_id');
  late final _fluid_synth_get_sfont_by_id =
      _fluid_synth_get_sfont_by_idPtr.asFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              ffi.Pointer<fluid_synth_t>, int)>();

  /// Get the preset of a channel
  ffi.Pointer<fluid_preset_t> fluid_synth_get_channel_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_get_channel_preset(
      synth,
      chan,
    );
  }

  late final _fluid_synth_get_channel_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_channel_preset');
  late final _fluid_synth_get_channel_preset =
      _fluid_synth_get_channel_presetPtr.asFunction<
          ffi.Pointer<fluid_preset_t> Function(
              ffi.Pointer<fluid_synth_t>, int)>();

  /// Offset the bank numbers in a SoundFont. Returns -1 if an error
  /// occured (out of memory or negative offset)
  int fluid_synth_set_bank_offset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
    int offset,
  ) {
    return _fluid_synth_set_bank_offset(
      synth,
      sfont_id,
      offset,
    );
  }

  late final _fluid_synth_set_bank_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_bank_offset');
  late final _fluid_synth_set_bank_offset = _fluid_synth_set_bank_offsetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Get the offset of the bank numbers in a SoundFont.
  int fluid_synth_get_bank_offset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
  ) {
    return _fluid_synth_get_bank_offset(
      synth,
      sfont_id,
    );
  }

  late final _fluid_synth_get_bank_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_bank_offset');
  late final _fluid_synth_get_bank_offset = _fluid_synth_get_bank_offsetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Set the parameters for the built-in reverb unit
  void fluid_synth_set_reverb(
    ffi.Pointer<fluid_synth_t> synth,
    double roomsize,
    double damping,
    double width,
    double level,
  ) {
    return _fluid_synth_set_reverb(
      synth,
      roomsize,
      damping,
      width,
      level,
    );
  }

  late final _fluid_synth_set_reverbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('fluid_synth_set_reverb');
  late final _fluid_synth_set_reverb = _fluid_synth_set_reverbPtr.asFunction<
      void Function(
          ffi.Pointer<fluid_synth_t>, double, double, double, double)>();

  /// Turn on (1) / off (0) the built-in reverb unit
  void fluid_synth_set_reverb_on(
    ffi.Pointer<fluid_synth_t> synth,
    int on1,
  ) {
    return _fluid_synth_set_reverb_on(
      synth,
      on1,
    );
  }

  late final _fluid_synth_set_reverb_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_reverb_on');
  late final _fluid_synth_set_reverb_on = _fluid_synth_set_reverb_onPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Query the current state of the reverb.
  double fluid_synth_get_reverb_roomsize(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_roomsize(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_roomsizePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_roomsize');
  late final _fluid_synth_get_reverb_roomsize =
      _fluid_synth_get_reverb_roomsizePtr
          .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_damp(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_damp(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_dampPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_damp');
  late final _fluid_synth_get_reverb_damp = _fluid_synth_get_reverb_dampPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_level(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_level(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_levelPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_level');
  late final _fluid_synth_get_reverb_level = _fluid_synth_get_reverb_levelPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_reverb_width(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_reverb_width(
      synth,
    );
  }

  late final _fluid_synth_get_reverb_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_reverb_width');
  late final _fluid_synth_get_reverb_width = _fluid_synth_get_reverb_widthPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  /// Set up the chorus. It should be turned on with fluid_synth_set_chorus_on.
  /// If faulty parameters are given, all new settings are discarded.
  /// Keep in mind, that the needed CPU time is proportional to 'nr'.
  void fluid_synth_set_chorus(
    ffi.Pointer<fluid_synth_t> synth,
    int nr,
    double level,
    double speed,
    double depth_ms,
    int type,
  ) {
    return _fluid_synth_set_chorus(
      synth,
      nr,
      level,
      speed,
      depth_ms,
      type,
    );
  }

  late final _fluid_synth_set_chorusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Double,
              ffi.Double, ffi.Double, ffi.Int)>>('fluid_synth_set_chorus');
  late final _fluid_synth_set_chorus = _fluid_synth_set_chorusPtr.asFunction<
      void Function(
          ffi.Pointer<fluid_synth_t>, int, double, double, double, int)>();

  /// Turn on (1) / off (0) the built-in chorus unit
  void fluid_synth_set_chorus_on(
    ffi.Pointer<fluid_synth_t> synth,
    int on1,
  ) {
    return _fluid_synth_set_chorus_on(
      synth,
      on1,
    );
  }

  late final _fluid_synth_set_chorus_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_chorus_on');
  late final _fluid_synth_set_chorus_on = _fluid_synth_set_chorus_onPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Query the current state of the chorus.
  int fluid_synth_get_chorus_nr(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_nr(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_nrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_chorus_nr');
  late final _fluid_synth_get_chorus_nr = _fluid_synth_get_chorus_nrPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_level(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_level(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_levelPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_level');
  late final _fluid_synth_get_chorus_level = _fluid_synth_get_chorus_levelPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_speed_Hz(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_speed_Hz(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_speed_HzPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_speed_Hz');
  late final _fluid_synth_get_chorus_speed_Hz =
      _fluid_synth_get_chorus_speed_HzPtr
          .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  double fluid_synth_get_chorus_depth_ms(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_depth_ms(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_depth_msPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_chorus_depth_ms');
  late final _fluid_synth_get_chorus_depth_ms =
      _fluid_synth_get_chorus_depth_msPtr
          .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_get_chorus_type(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_chorus_type(
      synth,
    );
  }

  late final _fluid_synth_get_chorus_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_chorus_type');
  late final _fluid_synth_get_chorus_type = _fluid_synth_get_chorus_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Returns the number of MIDI channels that the synthesizer uses
  /// internally
  int fluid_synth_count_midi_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_midi_channels(
      synth,
    );
  }

  late final _fluid_synth_count_midi_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_midi_channels');
  late final _fluid_synth_count_midi_channels =
      _fluid_synth_count_midi_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Returns the number of audio channels that the synthesizer uses
  /// internally
  int fluid_synth_count_audio_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_audio_channels(
      synth,
    );
  }

  late final _fluid_synth_count_audio_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_audio_channels');
  late final _fluid_synth_count_audio_channels =
      _fluid_synth_count_audio_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Returns the number of audio groups that the synthesizer uses
  /// internally. This is usually identical to audio_channels.
  int fluid_synth_count_audio_groups(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_audio_groups(
      synth,
    );
  }

  late final _fluid_synth_count_audio_groupsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_audio_groups');
  late final _fluid_synth_count_audio_groups =
      _fluid_synth_count_audio_groupsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Returns the number of effects channels that the synthesizer uses
  /// internally
  int fluid_synth_count_effects_channels(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_count_effects_channels(
      synth,
    );
  }

  late final _fluid_synth_count_effects_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_count_effects_channels');
  late final _fluid_synth_count_effects_channels =
      _fluid_synth_count_effects_channelsPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Set the master gain
  void fluid_synth_set_gain(
    ffi.Pointer<fluid_synth_t> synth,
    double gain,
  ) {
    return _fluid_synth_set_gain(
      synth,
      gain,
    );
  }

  late final _fluid_synth_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Float)>>('fluid_synth_set_gain');
  late final _fluid_synth_set_gain = _fluid_synth_set_gainPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>, double)>();

  /// Get the master gain
  double fluid_synth_get_gain(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_gain(
      synth,
    );
  }

  late final _fluid_synth_get_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_get_gain');
  late final _fluid_synth_get_gain = _fluid_synth_get_gainPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>)>();

  /// Set the polyphony limit (FluidSynth >= 1.0.6)
  int fluid_synth_set_polyphony(
    ffi.Pointer<fluid_synth_t> synth,
    int polyphony,
  ) {
    return _fluid_synth_set_polyphony(
      synth,
      polyphony,
    );
  }

  late final _fluid_synth_set_polyphonyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_polyphony');
  late final _fluid_synth_set_polyphony = _fluid_synth_set_polyphonyPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Get the polyphony limit (FluidSynth >= 1.0.6)
  int fluid_synth_get_polyphony(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_polyphony(
      synth,
    );
  }

  late final _fluid_synth_get_polyphonyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_polyphony');
  late final _fluid_synth_get_polyphony = _fluid_synth_get_polyphonyPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Get the internal buffer size. The internal buffer size if not the
  /// same thing as the buffer size specified in the
  /// settings. Internally, the synth *always* uses a specific buffer
  /// size independent of the buffer size used by the audio driver. The
  /// internal buffer size is normally 64 samples. The reason why it
  /// uses an internal buffer size is to allow audio drivers to call the
  /// synthesizer with a variable buffer length. The internal buffer
  /// size is useful for client who want to optimize their buffer sizes.
  int fluid_synth_get_internal_bufsize(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_get_internal_bufsize(
      synth,
    );
  }

  late final _fluid_synth_get_internal_bufsizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_synth_t>)>>(
          'fluid_synth_get_internal_bufsize');
  late final _fluid_synth_get_internal_bufsize =
      _fluid_synth_get_internal_bufsizePtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>)>();

  /// Set the interpolation method for one channel or all channels (chan = -1)
  int fluid_synth_set_interp_method(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int interp_method,
  ) {
    return _fluid_synth_set_interp_method(
      synth,
      chan,
      interp_method,
    );
  }

  late final _fluid_synth_set_interp_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_set_interp_method');
  late final _fluid_synth_set_interp_method = _fluid_synth_set_interp_methodPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Change the value of a generator. This function allows to control
  /// all synthesis parameters in real-time. The changes are additive,
  /// i.e. they add up to the existing parameter value. This function is
  /// similar to sending an NRPN message to the synthesizer. The
  /// function accepts a float as the value of the parameter. The
  /// parameter numbers and ranges are described in the SoundFont 2.01
  /// specification, paragraph 8.1.3, page 48. See also 'fluid_gen_type'.
  ///
  /// \param synth The synthesizer object.
  /// \param chan The MIDI channel number.
  /// \param param The parameter number.
  /// \param value The parameter value.
  /// \returns Your favorite dish.
  int fluid_synth_set_gen(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int param,
    double value,
  ) {
    return _fluid_synth_set_gen(
      synth,
      chan,
      param,
      value,
    );
  }

  late final _fluid_synth_set_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Float)>>('fluid_synth_set_gen');
  late final _fluid_synth_set_gen = _fluid_synth_set_genPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, double)>();

  /// Retreive the value of a generator. This function returns the value
  /// set by a previous call 'fluid_synth_set_gen' or by an NRPN message.
  ///
  /// \param synth The synthesizer object.
  /// \param chan The MIDI channel number.
  /// \param param The generator number.
  /// \returns The value of the generator.
  double fluid_synth_get_gen(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int param,
  ) {
    return _fluid_synth_get_gen(
      synth,
      chan,
      param,
    );
  }

  late final _fluid_synth_get_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_get_gen');
  late final _fluid_synth_get_gen = _fluid_synth_get_genPtr
      .asFunction<double Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  /// Create a new key-based tuning with given name, number, and
  /// pitches. The array 'pitches' should have length 128 and contains
  /// the pitch in cents of every key in cents. However, if 'pitches' is
  /// NULL, a new tuning is created with the well-tempered scale.
  ///
  /// \param synth The synthesizer object
  /// \param tuning_bank The tuning bank number [0-127]
  /// \param tuning_prog The tuning program number [0-127]
  /// \param name The name of the tuning
  /// \param pitch The array of pitch values. The array length has to be 128.
  int fluid_synth_create_key_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int tuning_bank,
    int tuning_prog,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> pitch,
  ) {
    return _fluid_synth_create_key_tuning(
      synth,
      tuning_bank,
      tuning_prog,
      name,
      pitch,
    );
  }

  late final _fluid_synth_create_key_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_create_key_tuning');
  late final _fluid_synth_create_key_tuning =
      _fluid_synth_create_key_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>)>();

  /// Create a new octave-based tuning with given name, number, and
  /// pitches.  The array 'pitches' should have length 12 and contains
  /// derivation in cents from the well-tempered scale. For example, if
  /// pitches[0] equals -33, then the C-keys will be tuned 33 cents
  /// below the well-tempered C.
  ///
  /// \param synth The synthesizer object
  /// \param tuning_bank The tuning bank number [0-127]
  /// \param tuning_prog The tuning program number [0-127]
  /// \param name The name of the tuning
  /// \param pitch The array of pitch derivations. The array length has to be 12.
  int fluid_synth_create_octave_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int tuning_bank,
    int tuning_prog,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> pitch,
  ) {
    return _fluid_synth_create_octave_tuning(
      synth,
      tuning_bank,
      tuning_prog,
      name,
      pitch,
    );
  }

  late final _fluid_synth_create_octave_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_create_octave_tuning');
  late final _fluid_synth_create_octave_tuning =
      _fluid_synth_create_octave_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>)>();

  int fluid_synth_activate_octave_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> pitch,
    int apply,
  ) {
    return _fluid_synth_activate_octave_tuning(
      synth,
      bank,
      prog,
      name,
      pitch,
      apply,
    );
  }

  late final _fluid_synth_activate_octave_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Int)>>('fluid_synth_activate_octave_tuning');
  late final _fluid_synth_activate_octave_tuning =
      _fluid_synth_activate_octave_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>, int)>();

  /// Request a note tuning changes. Both they 'keys' and 'pitches'
  /// arrays should be of length 'num_pitches'. If 'apply' is non-zero,
  /// the changes should be applied in real-time, i.e. sounding notes
  /// will have their pitch updated. 'APPLY' IS CURRENTLY IGNORED. The
  /// changes will be available for newly triggered notes only.
  ///
  /// \param synth The synthesizer object
  /// \param tuning_bank The tuning bank number [0-127]
  /// \param tuning_prog The tuning program number [0-127]
  /// \param len The length of the keys and pitch arrays
  /// \param keys The array of keys values.
  /// \param pitch The array of pitch values.
  /// \param apply Flag to indicate whether to changes should be applied in real-time.
  int fluid_synth_tune_notes(
    ffi.Pointer<fluid_synth_t> synth,
    int tuning_bank,
    int tuning_prog,
    int len,
    ffi.Pointer<ffi.Int> keys,
    ffi.Pointer<ffi.Double> pitch,
    int apply,
  ) {
    return _fluid_synth_tune_notes(
      synth,
      tuning_bank,
      tuning_prog,
      len,
      keys,
      pitch,
      apply,
    );
  }

  late final _fluid_synth_tune_notesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Int)>>('fluid_synth_tune_notes');
  late final _fluid_synth_tune_notes = _fluid_synth_tune_notesPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, int, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Double>, int)>();

  /// Select a tuning for a channel.
  ///
  /// \param synth The synthesizer object
  /// \param chan The channel number [0-max channels]
  /// \param tuning_bank The tuning bank number [0-127]
  /// \param tuning_prog The tuning program number [0-127]
  int fluid_synth_select_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int tuning_bank,
    int tuning_prog,
  ) {
    return _fluid_synth_select_tuning(
      synth,
      chan,
      tuning_bank,
      tuning_prog,
    );
  }

  late final _fluid_synth_select_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_select_tuning');
  late final _fluid_synth_select_tuning = _fluid_synth_select_tuningPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_activate_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int bank,
    int prog,
    int apply,
  ) {
    return _fluid_synth_activate_tuning(
      synth,
      chan,
      bank,
      prog,
      apply,
    );
  }

  late final _fluid_synth_activate_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('fluid_synth_activate_tuning');
  late final _fluid_synth_activate_tuning =
      _fluid_synth_activate_tuningPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, int, int, int, int)>();

  /// Set the tuning to the default well-tempered tuning on a channel.
  ///
  /// \param synth The synthesizer object
  /// \param chan The channel number [0-max channels]
  int fluid_synth_reset_tuning(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_reset_tuning(
      synth,
      chan,
    );
  }

  late final _fluid_synth_reset_tuningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_reset_tuning');
  late final _fluid_synth_reset_tuning = _fluid_synth_reset_tuningPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  /// Start the iteration throught the list of available tunings.
  ///
  /// \param synth The synthesizer object
  void fluid_synth_tuning_iteration_start(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_tuning_iteration_start(
      synth,
    );
  }

  late final _fluid_synth_tuning_iteration_startPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_tuning_iteration_start');
  late final _fluid_synth_tuning_iteration_start =
      _fluid_synth_tuning_iteration_startPtr
          .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  /// Get the next tuning in the iteration. This functions stores the
  /// bank and program number of the next tuning in the pointers given as
  /// arguments.
  ///
  /// \param synth The synthesizer object
  /// \param bank Pointer to an int to store the bank number
  /// \param prog Pointer to an int to store the program number
  /// \returns 1 if there is a next tuning, 0 otherwise
  int fluid_synth_tuning_iteration_next(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Int> bank,
    ffi.Pointer<ffi.Int> prog,
  ) {
    return _fluid_synth_tuning_iteration_next(
      synth,
      bank,
      prog,
    );
  }

  late final _fluid_synth_tuning_iteration_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_tuning_iteration_next');
  late final _fluid_synth_tuning_iteration_next =
      _fluid_synth_tuning_iteration_nextPtr.asFunction<
          int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  /// Dump the data of a tuning. This functions stores the name and
  /// pitch values of a tuning in the pointers given as arguments. Both
  /// name and pitch can be NULL is the data is not needed.
  ///
  /// \param synth The synthesizer object
  /// \param bank The tuning bank number [0-127]
  /// \param prog The tuning program number [0-127]
  /// \param name Pointer to a buffer to store the name
  /// \param len The length of the name buffer
  /// \param pitch Pointer to buffer to store the pitch values
  int fluid_synth_tuning_dump(
    ffi.Pointer<fluid_synth_t> synth,
    int bank,
    int prog,
    ffi.Pointer<ffi.Char> name,
    int len,
    ffi.Pointer<ffi.Double> pitch,
  ) {
    return _fluid_synth_tuning_dump(
      synth,
      bank,
      prog,
      name,
      len,
      pitch,
    );
  }

  late final _fluid_synth_tuning_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_tuning_dump');
  late final _fluid_synth_tuning_dump = _fluid_synth_tuning_dumpPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, int, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Double>)>();

  /// Get a textual representation of the last error
  ffi.Pointer<ffi.Char> fluid_synth_error(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_error(
      synth,
    );
  }

  late final _fluid_synth_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_synth_t>)>>('fluid_synth_error');
  late final _fluid_synth_error = _fluid_synth_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_synth_t>)>();

  /// Generate a number of samples. This function expects two signed
  /// 16bits buffers (left and right channel) that will be filled with
  /// samples.
  ///
  /// \param synth The synthesizer
  /// \param len The number of samples to generate
  /// \param lout The sample buffer for the left channel
  /// \param loff The offset, in samples, in the left buffer where the writing pointer starts
  /// \param lincr The increment, in samples, of the writing pointer in the left buffer
  /// \param rout The sample buffer for the right channel
  /// \param roff The offset, in samples, in the right buffer where the writing pointer starts
  /// \param rincr The increment, in samples, of the writing pointer in the right buffer
  /// \returns 0 if no error occured, non-zero otherwise
  int fluid_synth_write_s16(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Void> lout,
    int loff,
    int lincr,
    ffi.Pointer<ffi.Void> rout,
    int roff,
    int rincr,
  ) {
    return _fluid_synth_write_s16(
      synth,
      len,
      lout,
      loff,
      lincr,
      rout,
      roff,
      rincr,
    );
  }

  late final _fluid_synth_write_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_write_s16');
  late final _fluid_synth_write_s16 = _fluid_synth_write_s16Ptr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Void>, int,
          int, ffi.Pointer<ffi.Void>, int, int)>();

  /// Generate a number of samples. This function expects two floating
  /// point buffers (left and right channel) that will be filled with
  /// samples.
  ///
  /// \param synth The synthesizer
  /// \param len The number of samples to generate
  /// \param lout The sample buffer for the left channel
  /// \param loff The offset, in samples, in the left buffer where the writing pointer starts
  /// \param lincr The increment, in samples, of the writing pointer in the left buffer
  /// \param rout The sample buffer for the right channel
  /// \param roff The offset, in samples, in the right buffer where the writing pointer starts
  /// \param rincr The increment, in samples, of the writing pointer in the right buffer
  /// \returns 0 if no error occured, non-zero otherwise
  int fluid_synth_write_float(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Void> lout,
    int loff,
    int lincr,
    ffi.Pointer<ffi.Void> rout,
    int roff,
    int rincr,
  ) {
    return _fluid_synth_write_float(
      synth,
      len,
      lout,
      loff,
      lincr,
      rout,
      roff,
      rincr,
    );
  }

  late final _fluid_synth_write_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_write_float');
  late final _fluid_synth_write_float = _fluid_synth_write_floatPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, int, ffi.Pointer<ffi.Void>, int,
          int, ffi.Pointer<ffi.Void>, int, int)>();

  int fluid_synth_nwrite_float(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Float>> left,
    ffi.Pointer<ffi.Pointer<ffi.Float>> right,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx_left,
    ffi.Pointer<ffi.Pointer<ffi.Float>> fx_right,
  ) {
    return _fluid_synth_nwrite_float(
      synth,
      len,
      left,
      right,
      fx_left,
      fx_right,
    );
  }

  late final _fluid_synth_nwrite_floatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<fluid_synth_t>,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>,
                  ffi.Pointer<ffi.Pointer<ffi.Float>>)>>(
      'fluid_synth_nwrite_float');
  late final _fluid_synth_nwrite_float =
      _fluid_synth_nwrite_floatPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>)>();

  /// Generate a number of samples. This function implements the
  /// default interface defined in fluidsynth/audio.h. This function
  /// ignores the input buffers and expects at least two output
  /// buffer.
  ///
  /// \param synth The synthesizer
  /// \param len The number of samples to generate
  /// \param nin The number of input buffers
  /// \param in The array of input buffers
  /// \param nout The number of output buffers
  /// \param out The array of output buffers
  /// \returns 0 if no error occured, non-zero otherwise
  int fluid_synth_process(
    ffi.Pointer<fluid_synth_t> synth,
    int len,
    int nin,
    ffi.Pointer<ffi.Pointer<ffi.Float>> in1,
    int nout,
    ffi.Pointer<ffi.Pointer<ffi.Float>> out,
  ) {
    return _fluid_synth_process(
      synth,
      len,
      nin,
      in1,
      nout,
      out,
    );
  }

  late final _fluid_synth_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>)>>('fluid_synth_process');
  late final _fluid_synth_process = _fluid_synth_processPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Float>>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Float>>)>();

  /// Add a SoundFont loader to the synthesizer. Note that SoundFont
  /// loader don't necessarily load SoundFonts. They can load any type
  /// of wavetable data but export a SoundFont interface.
  void fluid_synth_add_sfloader(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sfloader_t> loader,
  ) {
    return _fluid_synth_add_sfloader(
      synth,
      loader,
    );
  }

  late final _fluid_synth_add_sfloaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sfloader_t>)>>('fluid_synth_add_sfloader');
  late final _fluid_synth_add_sfloader =
      _fluid_synth_add_sfloaderPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_sfloader_t>)>();

  /// Allocate a synthesis voice. This function is called by a
  /// soundfont's preset in response to a noteon event.
  /// The returned voice comes with default modulators installed (velocity-to-attenuation,
  /// velocity to filter, ...)
  /// Note: A single noteon event may create any number of voices, when the preset is layered.
  /// Typically 1 (mono) or 2 (stereo).
  ffi.Pointer<fluid_voice_t> fluid_synth_alloc_voice(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_sample_t> sample,
    int channum,
    int key,
    int vel,
  ) {
    return _fluid_synth_alloc_voice(
      synth,
      sample,
      channum,
      key,
      vel,
    );
  }

  late final _fluid_synth_alloc_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_voice_t> Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_sample_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('fluid_synth_alloc_voice');
  late final _fluid_synth_alloc_voice = _fluid_synth_alloc_voicePtr.asFunction<
      ffi.Pointer<fluid_voice_t> Function(ffi.Pointer<fluid_synth_t>,
          ffi.Pointer<fluid_sample_t>, int, int, int)>();

  /// Start a synthesis voice. This function is called by a
  /// soundfont's preset in response to a noteon event after the voice
  /// has been allocated with fluid_synth_alloc_voice() and
  /// initialized.
  /// Exclusive classes are processed here.
  void fluid_synth_start_voice(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_synth_start_voice(
      synth,
      voice,
    );
  }

  late final _fluid_synth_start_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_voice_t>)>>('fluid_synth_start_voice');
  late final _fluid_synth_start_voice = _fluid_synth_start_voicePtr.asFunction<
      void Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_voice_t>)>();

  /// Write a list of all voices matching ID into buf, but not more than bufsize voices.
  /// If ID <0, return all voices.
  void fluid_synth_get_voicelist(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Pointer<fluid_voice_t>> buf,
    int bufsize,
    int ID,
  ) {
    return _fluid_synth_get_voicelist(
      synth,
      buf,
      bufsize,
      ID,
    );
  }

  late final _fluid_synth_get_voicelistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Pointer<fluid_voice_t>>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_get_voicelist');
  late final _fluid_synth_get_voicelist =
      _fluid_synth_get_voicelistPtr.asFunction<
          void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<ffi.Pointer<fluid_voice_t>>, int, int)>();

  void fluid_init_default_fileapi(
    ffi.Pointer<fluid_fileapi_t> fileapi,
  ) {
    return _fluid_init_default_fileapi(
      fileapi,
    );
  }

  late final _fluid_init_default_fileapiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_fileapi_t>)>>(
      'fluid_init_default_fileapi');
  late final _fluid_init_default_fileapi = _fluid_init_default_fileapiPtr
      .asFunction<void Function(ffi.Pointer<fluid_fileapi_t>)>();

  void fluid_set_default_fileapi(
    ffi.Pointer<fluid_fileapi_t> fileapi,
  ) {
    return _fluid_set_default_fileapi(
      fileapi,
    );
  }

  late final _fluid_set_default_fileapiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_fileapi_t>)>>(
      'fluid_set_default_fileapi');
  late final _fluid_set_default_fileapi = _fluid_set_default_fileapiPtr
      .asFunction<void Function(ffi.Pointer<fluid_fileapi_t>)>();

  ffi.Pointer<fluid_sfloader_t> new_fluid_defsfloader() {
    return _new_fluid_defsfloader();
  }

  late final _new_fluid_defsfloaderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_sfloader_t> Function()>>(
          'new_fluid_defsfloader');
  late final _new_fluid_defsfloader = _new_fluid_defsfloaderPtr
      .asFunction<ffi.Pointer<fluid_sfloader_t> Function()>();

  int delete_fluid_defsfloader(
    ffi.Pointer<fluid_sfloader_t> loader,
  ) {
    return _delete_fluid_defsfloader(
      loader,
    );
  }

  late final _delete_fluid_defsfloaderPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sfloader_t>)>>(
      'delete_fluid_defsfloader');
  late final _delete_fluid_defsfloader = _delete_fluid_defsfloaderPtr
      .asFunction<int Function(ffi.Pointer<fluid_sfloader_t>)>();

  /// Creates a fluid_sfont_t wrapping an fluid_ramsfont_t
  ffi.Pointer<fluid_sfont_t> fluid_ramsfont_create_sfont() {
    return _fluid_ramsfont_create_sfont();
  }

  late final _fluid_ramsfont_create_sfontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_sfont_t> Function()>>(
          'fluid_ramsfont_create_sfont');
  late final _fluid_ramsfont_create_sfont = _fluid_ramsfont_create_sfontPtr
      .asFunction<ffi.Pointer<fluid_sfont_t> Function()>();

  /// ramsfont specific API
  int fluid_ramsfont_set_name(
    ffi.Pointer<fluid_ramsfont_t> sfont,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_ramsfont_set_name(
      sfont,
      name,
    );
  }

  late final _fluid_ramsfont_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_ramsfont_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_ramsfont_set_name');
  late final _fluid_ramsfont_set_name = _fluid_ramsfont_set_namePtr.asFunction<
      int Function(ffi.Pointer<fluid_ramsfont_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_ramsfont_add_izone(
    ffi.Pointer<fluid_ramsfont_t> sfont,
    int bank,
    int num,
    ffi.Pointer<fluid_sample_t> sample,
    int lokey,
    int hikey,
  ) {
    return _fluid_ramsfont_add_izone(
      sfont,
      bank,
      num,
      sample,
      lokey,
      hikey,
    );
  }

  late final _fluid_ramsfont_add_izonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ramsfont_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_sample_t>,
              ffi.Int,
              ffi.Int)>>('fluid_ramsfont_add_izone');
  late final _fluid_ramsfont_add_izone =
      _fluid_ramsfont_add_izonePtr.asFunction<
          int Function(ffi.Pointer<fluid_ramsfont_t>, int, int,
              ffi.Pointer<fluid_sample_t>, int, int)>();

  int fluid_ramsfont_remove_izone(
    ffi.Pointer<fluid_ramsfont_t> sfont,
    int bank,
    int num,
    ffi.Pointer<fluid_sample_t> sample,
  ) {
    return _fluid_ramsfont_remove_izone(
      sfont,
      bank,
      num,
      sample,
    );
  }

  late final _fluid_ramsfont_remove_izonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ramsfont_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_sample_t>)>>('fluid_ramsfont_remove_izone');
  late final _fluid_ramsfont_remove_izone =
      _fluid_ramsfont_remove_izonePtr.asFunction<
          int Function(ffi.Pointer<fluid_ramsfont_t>, int, int,
              ffi.Pointer<fluid_sample_t>)>();

  int fluid_ramsfont_izone_set_gen(
    ffi.Pointer<fluid_ramsfont_t> sfont,
    int bank,
    int num,
    ffi.Pointer<fluid_sample_t> sample,
    int gen_type,
    double value,
  ) {
    return _fluid_ramsfont_izone_set_gen(
      sfont,
      bank,
      num,
      sample,
      gen_type,
      value,
    );
  }

  late final _fluid_ramsfont_izone_set_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ramsfont_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_sample_t>,
              ffi.Int,
              ffi.Float)>>('fluid_ramsfont_izone_set_gen');
  late final _fluid_ramsfont_izone_set_gen =
      _fluid_ramsfont_izone_set_genPtr.asFunction<
          int Function(ffi.Pointer<fluid_ramsfont_t>, int, int,
              ffi.Pointer<fluid_sample_t>, int, double)>();

  int fluid_ramsfont_izone_set_loop(
    ffi.Pointer<fluid_ramsfont_t> sfont,
    int bank,
    int num,
    ffi.Pointer<fluid_sample_t> sample,
    int on1,
    double loopstart,
    double loopend,
  ) {
    return _fluid_ramsfont_izone_set_loop(
      sfont,
      bank,
      num,
      sample,
      on1,
      loopstart,
      loopend,
    );
  }

  late final _fluid_ramsfont_izone_set_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_ramsfont_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<fluid_sample_t>,
              ffi.Int,
              ffi.Float,
              ffi.Float)>>('fluid_ramsfont_izone_set_loop');
  late final _fluid_ramsfont_izone_set_loop =
      _fluid_ramsfont_izone_set_loopPtr.asFunction<
          int Function(ffi.Pointer<fluid_ramsfont_t>, int, int,
              ffi.Pointer<fluid_sample_t>, int, double, double)>();

  /// sample_t specific API for ramsfont
  ffi.Pointer<fluid_sample_t> new_fluid_ramsample() {
    return _new_fluid_ramsample();
  }

  late final _new_fluid_ramsamplePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_sample_t> Function()>>(
          'new_fluid_ramsample');
  late final _new_fluid_ramsample = _new_fluid_ramsamplePtr
      .asFunction<ffi.Pointer<fluid_sample_t> Function()>();

  int delete_fluid_ramsample(
    ffi.Pointer<fluid_sample_t> sample,
  ) {
    return _delete_fluid_ramsample(
      sample,
    );
  }

  late final _delete_fluid_ramsamplePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sample_t>)>>(
      'delete_fluid_ramsample');
  late final _delete_fluid_ramsample = _delete_fluid_ramsamplePtr
      .asFunction<int Function(ffi.Pointer<fluid_sample_t>)>();

  int fluid_sample_set_name(
    ffi.Pointer<fluid_sample_t> sample,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _fluid_sample_set_name(
      sample,
      name,
    );
  }

  late final _fluid_sample_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sample_t>,
              ffi.Pointer<ffi.Char>)>>('fluid_sample_set_name');
  late final _fluid_sample_set_name = _fluid_sample_set_namePtr.asFunction<
      int Function(ffi.Pointer<fluid_sample_t>, ffi.Pointer<ffi.Char>)>();

  int fluid_sample_set_sound_data(
    ffi.Pointer<fluid_sample_t> sample,
    ffi.Pointer<ffi.Short> data,
    int nbframes,
    int copy_data,
    int rootkey,
  ) {
    return _fluid_sample_set_sound_data(
      sample,
      data,
      nbframes,
      copy_data,
      rootkey,
    );
  }

  late final _fluid_sample_set_sound_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_sample_t>,
              ffi.Pointer<ffi.Short>,
              ffi.UnsignedInt,
              ffi.Short,
              ffi.Int)>>('fluid_sample_set_sound_data');
  late final _fluid_sample_set_sound_data =
      _fluid_sample_set_sound_dataPtr.asFunction<
          int Function(ffi.Pointer<fluid_sample_t>, ffi.Pointer<ffi.Short>, int,
              int, int)>();

  fluid_log_function_t fluid_set_log_function(
    int level,
    fluid_log_function_t fun,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_set_log_function(
      level,
      fun,
      data,
    );
  }

  late final _fluid_set_log_functionPtr = _lookup<
      ffi.NativeFunction<
          fluid_log_function_t Function(ffi.Int, fluid_log_function_t,
              ffi.Pointer<ffi.Void>)>>('fluid_set_log_function');
  late final _fluid_set_log_function = _fluid_set_log_functionPtr.asFunction<
      fluid_log_function_t Function(
          int, fluid_log_function_t, ffi.Pointer<ffi.Void>)>();

  void fluid_default_log_function(
    int level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_default_log_function(
      level,
      message,
      data,
    );
  }

  late final _fluid_default_log_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('fluid_default_log_function');
  late final _fluid_default_log_function =
      _fluid_default_log_functionPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int fluid_log(
    int level,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _fluid_log(
      level,
      fmt,
    );
  }

  late final _fluid_logPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'fluid_log');
  late final _fluid_log =
      _fluid_logPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  /// fluid_is_soundfont returns 1 if the specified filename is a
  /// soundfont. It retuns 0 otherwise. The current implementation only
  /// checks for the "RIFF" header in the file. It is useful only to
  /// distinguish between SoundFonts and MIDI files.
  int fluid_is_soundfont(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _fluid_is_soundfont(
      filename,
    );
  }

  late final _fluid_is_soundfontPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'fluid_is_soundfont');
  late final _fluid_is_soundfont =
      _fluid_is_soundfontPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// fluid_is_midifile returns 1 if the specified filename is a MIDI
  /// file. It retuns 0 otherwise. The current implementation only checks
  /// for the "MThd" header in the file.
  int fluid_is_midifile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _fluid_is_midifile(
      filename,
    );
  }

  late final _fluid_is_midifilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'fluid_is_midifile');
  late final _fluid_is_midifile =
      _fluid_is_midifilePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<fluid_mod_t> fluid_mod_new() {
    return _fluid_mod_new();
  }

  late final _fluid_mod_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_mod_t> Function()>>(
          'fluid_mod_new');
  late final _fluid_mod_new =
      _fluid_mod_newPtr.asFunction<ffi.Pointer<fluid_mod_t> Function()>();

  void fluid_mod_delete(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_delete(
      mod,
    );
  }

  late final _fluid_mod_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_delete');
  late final _fluid_mod_delete = _fluid_mod_deletePtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>)>();

  void fluid_mod_set_source1(
    ffi.Pointer<fluid_mod_t> mod,
    int src,
    int flags,
  ) {
    return _fluid_mod_set_source1(
      mod,
      src,
      flags,
    );
  }

  late final _fluid_mod_set_source1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>, ffi.Int,
              ffi.Int)>>('fluid_mod_set_source1');
  late final _fluid_mod_set_source1 = _fluid_mod_set_source1Ptr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int, int)>();

  void fluid_mod_set_source2(
    ffi.Pointer<fluid_mod_t> mod,
    int src,
    int flags,
  ) {
    return _fluid_mod_set_source2(
      mod,
      src,
      flags,
    );
  }

  late final _fluid_mod_set_source2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>, ffi.Int,
              ffi.Int)>>('fluid_mod_set_source2');
  late final _fluid_mod_set_source2 = _fluid_mod_set_source2Ptr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int, int)>();

  void fluid_mod_set_dest(
    ffi.Pointer<fluid_mod_t> mod,
    int dst,
  ) {
    return _fluid_mod_set_dest(
      mod,
      dst,
    );
  }

  late final _fluid_mod_set_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_mod_t>, ffi.Int)>>('fluid_mod_set_dest');
  late final _fluid_mod_set_dest = _fluid_mod_set_destPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, int)>();

  void fluid_mod_set_amount(
    ffi.Pointer<fluid_mod_t> mod,
    double amount,
  ) {
    return _fluid_mod_set_amount(
      mod,
      amount,
    );
  }

  late final _fluid_mod_set_amountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_mod_t>, ffi.Double)>>('fluid_mod_set_amount');
  late final _fluid_mod_set_amount = _fluid_mod_set_amountPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>, double)>();

  int fluid_mod_get_source1(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_source1(
      mod,
    );
  }

  late final _fluid_mod_get_source1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_source1');
  late final _fluid_mod_get_source1 = _fluid_mod_get_source1Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_flags1(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_flags1(
      mod,
    );
  }

  late final _fluid_mod_get_flags1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_flags1');
  late final _fluid_mod_get_flags1 = _fluid_mod_get_flags1Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_source2(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_source2(
      mod,
    );
  }

  late final _fluid_mod_get_source2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_source2');
  late final _fluid_mod_get_source2 = _fluid_mod_get_source2Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_flags2(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_flags2(
      mod,
    );
  }

  late final _fluid_mod_get_flags2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_flags2');
  late final _fluid_mod_get_flags2 = _fluid_mod_get_flags2Ptr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_get_dest(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_dest(
      mod,
    );
  }

  late final _fluid_mod_get_destPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_mod_get_dest');
  late final _fluid_mod_get_dest = _fluid_mod_get_destPtr
      .asFunction<int Function(ffi.Pointer<fluid_mod_t>)>();

  double fluid_mod_get_amount(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_mod_get_amount(
      mod,
    );
  }

  late final _fluid_mod_get_amountPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<fluid_mod_t>)>>(
      'fluid_mod_get_amount');
  late final _fluid_mod_get_amount = _fluid_mod_get_amountPtr
      .asFunction<double Function(ffi.Pointer<fluid_mod_t>)>();

  int fluid_mod_test_identity(
    ffi.Pointer<fluid_mod_t> mod1,
    ffi.Pointer<fluid_mod_t> mod2,
  ) {
    return _fluid_mod_test_identity(
      mod1,
      mod2,
    );
  }

  late final _fluid_mod_test_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_mod_t>,
              ffi.Pointer<fluid_mod_t>)>>('fluid_mod_test_identity');
  late final _fluid_mod_test_identity = _fluid_mod_test_identityPtr.asFunction<
      int Function(ffi.Pointer<fluid_mod_t>, ffi.Pointer<fluid_mod_t>)>();

  int fluid_gen_set_default_values(
    ffi.Pointer<fluid_gen_t> gen,
  ) {
    return _fluid_gen_set_default_values(
      gen,
    );
  }

  late final _fluid_gen_set_default_valuesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_gen_t>)>>(
          'fluid_gen_set_default_values');
  late final _fluid_gen_set_default_values = _fluid_gen_set_default_valuesPtr
      .asFunction<int Function(ffi.Pointer<fluid_gen_t>)>();

  /// Update all the synthesis parameters, which depend on generator gen.
  /// This is only necessary after changing a generator of an already operating voice.
  /// Most applications will not need this function.
  void fluid_voice_update_param(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
  ) {
    return _fluid_voice_update_param(
      voice,
      gen,
    );
  }

  late final _fluid_voice_update_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>,
              ffi.Int)>>('fluid_voice_update_param');
  late final _fluid_voice_update_param = _fluid_voice_update_paramPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int)>();

  void fluid_voice_add_mod1(
    ffi.Pointer<fluid_voice_t> voice,
    ffi.Pointer<fluid_mod_t> mod,
    int mode,
  ) {
    return _fluid_voice_add_mod1(
      voice,
      mod,
      mode,
    );
  }

  late final _fluid_voice_add_mod1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>,
              ffi.Pointer<fluid_mod_t>, ffi.Int)>>('fluid_voice_add_mod');
  late final _fluid_voice_add_mod1 = _fluid_voice_add_mod1Ptr.asFunction<
      void Function(
          ffi.Pointer<fluid_voice_t>, ffi.Pointer<fluid_mod_t>, int)>();

  /// Set the value of a generator
  void fluid_voice_gen_set(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
    double val,
  ) {
    return _fluid_voice_gen_set(
      voice,
      gen,
      val,
    );
  }

  late final _fluid_voice_gen_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>, ffi.Int,
              ffi.Float)>>('fluid_voice_gen_set');
  late final _fluid_voice_gen_set = _fluid_voice_gen_setPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int, double)>();

  /// Get the value of a generator
  double fluid_voice_gen_get(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
  ) {
    return _fluid_voice_gen_get(
      voice,
      gen,
    );
  }

  late final _fluid_voice_gen_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<fluid_voice_t>, ffi.Int)>>('fluid_voice_gen_get');
  late final _fluid_voice_gen_get = _fluid_voice_gen_getPtr
      .asFunction<double Function(ffi.Pointer<fluid_voice_t>, int)>();

  /// Modify the value of a generator by val
  void fluid_voice_gen_incr(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
    double val,
  ) {
    return _fluid_voice_gen_incr(
      voice,
      gen,
      val,
    );
  }

  late final _fluid_voice_gen_incrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_voice_t>, ffi.Int,
              ffi.Float)>>('fluid_voice_gen_incr');
  late final _fluid_voice_gen_incr = _fluid_voice_gen_incrPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>, int, double)>();

  /// Return the unique ID of the noteon-event. A sound font loader
  /// may store the voice processes it has created for * real-time
  /// control during the operation of a voice (for example: parameter
  /// changes in sound font editor). The synth uses a pool of
  /// voices, which are 'recycled' and never deallocated.
  ///
  /// Before modifying an existing voice, check
  /// - that its state is still 'playing'
  /// - that the ID is still the same
  /// Otherwise the voice has finished playing.
  int fluid_voice_get_id(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_id(
      voice,
    );
  }

  late final _fluid_voice_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<fluid_voice_t>)>>('fluid_voice_get_id');
  late final _fluid_voice_get_id = _fluid_voice_get_idPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_is_playing(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_is_playing(
      voice,
    );
  }

  late final _fluid_voice_is_playingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_is_playing');
  late final _fluid_voice_is_playing = _fluid_voice_is_playingPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  /// If the peak volume during the loop is known, then the voice can
  /// be released earlier during the release phase. Otherwise, the
  /// voice will operate (inaudibly), until the envelope is at the
  /// nominal turnoff point. In many cases the loop volume is many dB
  /// below the maximum volume.  For example, the loop volume for a
  /// typical acoustic piano is 20 dB below max.  Taking that into
  /// account in the turn-off algorithm we can save 20 dB / 100 dB =>
  /// 1/5 of the total release time.
  /// So it's a good idea to call fluid_voice_optimize_sample
  /// on each sample once.
  int fluid_voice_optimize_sample(
    ffi.Pointer<fluid_sample_t> s,
  ) {
    return _fluid_voice_optimize_sample(
      s,
    );
  }

  late final _fluid_voice_optimize_samplePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sample_t>)>>(
      'fluid_voice_optimize_sample');
  late final _fluid_voice_optimize_sample = _fluid_voice_optimize_samplePtr
      .asFunction<int Function(ffi.Pointer<fluid_sample_t>)>();

  void fluid_version(
    ffi.Pointer<ffi.Int> major,
    ffi.Pointer<ffi.Int> minor,
    ffi.Pointer<ffi.Int> micro,
  ) {
    return _fluid_version(
      major,
      minor,
      micro,
    );
  }

  late final _fluid_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('fluid_version');
  late final _fluid_version = _fluid_versionPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fluid_version_str() {
    return _fluid_version_str();
  }

  late final _fluid_version_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'fluid_version_str');
  late final _fluid_version_str =
      _fluid_version_strPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> fluid_error() {
    return _fluid_error();
  }

  late final _fluid_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'fluid_error');
  late final _fluid_error =
      _fluid_errorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<fluid_list_t> new_fluid_list() {
    return _new_fluid_list();
  }

  late final _new_fluid_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_list_t> Function()>>(
          'new_fluid_list');
  late final _new_fluid_list =
      _new_fluid_listPtr.asFunction<ffi.Pointer<fluid_list_t> Function()>();

  void delete_fluid_list(
    ffi.Pointer<fluid_list_t> list,
  ) {
    return _delete_fluid_list(
      list,
    );
  }

  late final _delete_fluid_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_list_t>)>>(
          'delete_fluid_list');
  late final _delete_fluid_list = _delete_fluid_listPtr
      .asFunction<void Function(ffi.Pointer<fluid_list_t>)>();

  void delete1_fluid_list(
    ffi.Pointer<fluid_list_t> list,
  ) {
    return _delete1_fluid_list(
      list,
    );
  }

  late final _delete1_fluid_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_list_t>)>>(
          'delete1_fluid_list');
  late final _delete1_fluid_list = _delete1_fluid_listPtr
      .asFunction<void Function(ffi.Pointer<fluid_list_t>)>();

  ffi.Pointer<fluid_list_t> fluid_list_sort(
    ffi.Pointer<fluid_list_t> list,
    fluid_compare_func_t compare_func,
  ) {
    return _fluid_list_sort(
      list,
      compare_func,
    );
  }

  late final _fluid_list_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>,
              fluid_compare_func_t)>>('fluid_list_sort');
  late final _fluid_list_sort = _fluid_list_sortPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, fluid_compare_func_t)>();

  ffi.Pointer<fluid_list_t> fluid_list_append(
    ffi.Pointer<fluid_list_t> list,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_list_append(
      list,
      data,
    );
  }

  late final _fluid_list_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_list_append');
  late final _fluid_list_append = _fluid_list_appendPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<fluid_list_t> fluid_list_prepend(
    ffi.Pointer<fluid_list_t> list,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_list_prepend(
      list,
      data,
    );
  }

  late final _fluid_list_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_list_prepend');
  late final _fluid_list_prepend = _fluid_list_prependPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<fluid_list_t> fluid_list_remove(
    ffi.Pointer<fluid_list_t> list,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_list_remove(
      list,
      data,
    );
  }

  late final _fluid_list_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>,
              ffi.Pointer<ffi.Void>)>>('fluid_list_remove');
  late final _fluid_list_remove = _fluid_list_removePtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<fluid_list_t> fluid_list_remove_link(
    ffi.Pointer<fluid_list_t> list,
    ffi.Pointer<fluid_list_t> llink,
  ) {
    return _fluid_list_remove_link(
      list,
      llink,
    );
  }

  late final _fluid_list_remove_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>,
              ffi.Pointer<fluid_list_t>)>>('fluid_list_remove_link');
  late final _fluid_list_remove_link = _fluid_list_remove_linkPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, ffi.Pointer<fluid_list_t>)>();

  ffi.Pointer<fluid_list_t> fluid_list_nth(
    ffi.Pointer<fluid_list_t> list,
    int n,
  ) {
    return _fluid_list_nth(
      list,
      n,
    );
  }

  late final _fluid_list_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(
              ffi.Pointer<fluid_list_t>, ffi.Int)>>('fluid_list_nth');
  late final _fluid_list_nth = _fluid_list_nthPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>, int)>();

  ffi.Pointer<fluid_list_t> fluid_list_last(
    ffi.Pointer<fluid_list_t> list,
  ) {
    return _fluid_list_last(
      list,
    );
  }

  late final _fluid_list_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(
              ffi.Pointer<fluid_list_t>)>>('fluid_list_last');
  late final _fluid_list_last = _fluid_list_lastPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>)>();

  ffi.Pointer<fluid_list_t> fluid_list_insert_at(
    ffi.Pointer<fluid_list_t> list,
    int n,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _fluid_list_insert_at(
      list,
      n,
      data,
    );
  }

  late final _fluid_list_insert_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_list_t> Function(ffi.Pointer<fluid_list_t>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('fluid_list_insert_at');
  late final _fluid_list_insert_at = _fluid_list_insert_atPtr.asFunction<
      ffi.Pointer<fluid_list_t> Function(
          ffi.Pointer<fluid_list_t>, int, ffi.Pointer<ffi.Void>)>();

  int fluid_list_size(
    ffi.Pointer<fluid_list_t> list,
  ) {
    return _fluid_list_size(
      list,
    );
  }

  late final _fluid_list_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_list_t>)>>(
          'fluid_list_size');
  late final _fluid_list_size =
      _fluid_list_sizePtr.asFunction<int Function(ffi.Pointer<fluid_list_t>)>();

  ffi.Pointer<fluid_revmodel_t> new_fluid_revmodel() {
    return _new_fluid_revmodel();
  }

  late final _new_fluid_revmodelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fluid_revmodel_t> Function()>>(
          'new_fluid_revmodel');
  late final _new_fluid_revmodel = _new_fluid_revmodelPtr
      .asFunction<ffi.Pointer<fluid_revmodel_t> Function()>();

  void delete_fluid_revmodel(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _delete_fluid_revmodel(
      rev,
    );
  }

  late final _delete_fluid_revmodelPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_revmodel_t>)>>(
      'delete_fluid_revmodel');
  late final _delete_fluid_revmodel = _delete_fluid_revmodelPtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>)>();

  void fluid_revmodel_processmix(
    ffi.Pointer<fluid_revmodel_t> rev,
    ffi.Pointer<fluid_real_t> in1,
    ffi.Pointer<fluid_real_t> left_out,
    ffi.Pointer<fluid_real_t> right_out,
  ) {
    return _fluid_revmodel_processmix(
      rev,
      in1,
      left_out,
      right_out,
    );
  }

  late final _fluid_revmodel_processmixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_revmodel_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>>('fluid_revmodel_processmix');
  late final _fluid_revmodel_processmix =
      _fluid_revmodel_processmixPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_revmodel_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>();

  void fluid_revmodel_processreplace(
    ffi.Pointer<fluid_revmodel_t> rev,
    ffi.Pointer<fluid_real_t> in1,
    ffi.Pointer<fluid_real_t> left_out,
    ffi.Pointer<fluid_real_t> right_out,
  ) {
    return _fluid_revmodel_processreplace(
      rev,
      in1,
      left_out,
      right_out,
    );
  }

  late final _fluid_revmodel_processreplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_revmodel_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>>('fluid_revmodel_processreplace');
  late final _fluid_revmodel_processreplace =
      _fluid_revmodel_processreplacePtr.asFunction<
          void Function(
              ffi.Pointer<fluid_revmodel_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>();

  void fluid_revmodel_reset(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _fluid_revmodel_reset(
      rev,
    );
  }

  late final _fluid_revmodel_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_revmodel_t>)>>(
      'fluid_revmodel_reset');
  late final _fluid_revmodel_reset = _fluid_revmodel_resetPtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>)>();

  void fluid_revmodel_setroomsize(
    ffi.Pointer<fluid_revmodel_t> rev,
    double value,
  ) {
    return _fluid_revmodel_setroomsize(
      rev,
      value,
    );
  }

  late final _fluid_revmodel_setroomsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_revmodel_t>,
              fluid_real_t)>>('fluid_revmodel_setroomsize');
  late final _fluid_revmodel_setroomsize = _fluid_revmodel_setroomsizePtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>, double)>();

  void fluid_revmodel_setdamp(
    ffi.Pointer<fluid_revmodel_t> rev,
    double value,
  ) {
    return _fluid_revmodel_setdamp(
      rev,
      value,
    );
  }

  late final _fluid_revmodel_setdampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_revmodel_t>,
              fluid_real_t)>>('fluid_revmodel_setdamp');
  late final _fluid_revmodel_setdamp = _fluid_revmodel_setdampPtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>, double)>();

  void fluid_revmodel_setlevel(
    ffi.Pointer<fluid_revmodel_t> rev,
    double value,
  ) {
    return _fluid_revmodel_setlevel(
      rev,
      value,
    );
  }

  late final _fluid_revmodel_setlevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_revmodel_t>,
              fluid_real_t)>>('fluid_revmodel_setlevel');
  late final _fluid_revmodel_setlevel = _fluid_revmodel_setlevelPtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>, double)>();

  void fluid_revmodel_setwidth(
    ffi.Pointer<fluid_revmodel_t> rev,
    double value,
  ) {
    return _fluid_revmodel_setwidth(
      rev,
      value,
    );
  }

  late final _fluid_revmodel_setwidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_revmodel_t>,
              fluid_real_t)>>('fluid_revmodel_setwidth');
  late final _fluid_revmodel_setwidth = _fluid_revmodel_setwidthPtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>, double)>();

  void fluid_revmodel_setmode(
    ffi.Pointer<fluid_revmodel_t> rev,
    double value,
  ) {
    return _fluid_revmodel_setmode(
      rev,
      value,
    );
  }

  late final _fluid_revmodel_setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_revmodel_t>,
              fluid_real_t)>>('fluid_revmodel_setmode');
  late final _fluid_revmodel_setmode = _fluid_revmodel_setmodePtr
      .asFunction<void Function(ffi.Pointer<fluid_revmodel_t>, double)>();

  double fluid_revmodel_getroomsize(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _fluid_revmodel_getroomsize(
      rev,
    );
  }

  late final _fluid_revmodel_getroomsizePtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_revmodel_t>)>>('fluid_revmodel_getroomsize');
  late final _fluid_revmodel_getroomsize = _fluid_revmodel_getroomsizePtr
      .asFunction<double Function(ffi.Pointer<fluid_revmodel_t>)>();

  double fluid_revmodel_getdamp(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _fluid_revmodel_getdamp(
      rev,
    );
  }

  late final _fluid_revmodel_getdampPtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_revmodel_t>)>>('fluid_revmodel_getdamp');
  late final _fluid_revmodel_getdamp = _fluid_revmodel_getdampPtr
      .asFunction<double Function(ffi.Pointer<fluid_revmodel_t>)>();

  double fluid_revmodel_getlevel(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _fluid_revmodel_getlevel(
      rev,
    );
  }

  late final _fluid_revmodel_getlevelPtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_revmodel_t>)>>('fluid_revmodel_getlevel');
  late final _fluid_revmodel_getlevel = _fluid_revmodel_getlevelPtr
      .asFunction<double Function(ffi.Pointer<fluid_revmodel_t>)>();

  double fluid_revmodel_getwidth(
    ffi.Pointer<fluid_revmodel_t> rev,
  ) {
    return _fluid_revmodel_getwidth(
      rev,
    );
  }

  late final _fluid_revmodel_getwidthPtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_revmodel_t>)>>('fluid_revmodel_getwidth');
  late final _fluid_revmodel_getwidth = _fluid_revmodel_getwidthPtr
      .asFunction<double Function(ffi.Pointer<fluid_revmodel_t>)>();

  double fluid_gen_scale(
    int gen,
    double value,
  ) {
    return _fluid_gen_scale(
      gen,
      value,
    );
  }

  late final _fluid_gen_scalePtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(ffi.Int, ffi.Float)>>(
          'fluid_gen_scale');
  late final _fluid_gen_scale =
      _fluid_gen_scalePtr.asFunction<double Function(int, double)>();

  double fluid_gen_scale_nrpn(
    int gen,
    int nrpn,
  ) {
    return _fluid_gen_scale_nrpn(
      gen,
      nrpn,
    );
  }

  late final _fluid_gen_scale_nrpnPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(ffi.Int, ffi.Int)>>(
          'fluid_gen_scale_nrpn');
  late final _fluid_gen_scale_nrpn =
      _fluid_gen_scale_nrpnPtr.asFunction<double Function(int, int)>();

  int fluid_gen_init(
    ffi.Pointer<fluid_gen_t> gen,
    ffi.Pointer<fluid_channel_t> channel,
  ) {
    return _fluid_gen_init(
      gen,
      channel,
    );
  }

  late final _fluid_gen_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_gen_t>,
              ffi.Pointer<fluid_channel_t>)>>('fluid_gen_init');
  late final _fluid_gen_init = _fluid_gen_initPtr.asFunction<
      int Function(ffi.Pointer<fluid_gen_t>, ffi.Pointer<fluid_channel_t>)>();

  void fluid_conversion_config() {
    return _fluid_conversion_config();
  }

  late final _fluid_conversion_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'fluid_conversion_config');
  late final _fluid_conversion_config =
      _fluid_conversion_configPtr.asFunction<void Function()>();

  double fluid_ct2hz_real(
    double cents,
  ) {
    return _fluid_ct2hz_real(
      cents,
    );
  }

  late final _fluid_ct2hz_realPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_ct2hz_real');
  late final _fluid_ct2hz_real =
      _fluid_ct2hz_realPtr.asFunction<double Function(double)>();

  double fluid_ct2hz(
    double cents,
  ) {
    return _fluid_ct2hz(
      cents,
    );
  }

  late final _fluid_ct2hzPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_ct2hz');
  late final _fluid_ct2hz =
      _fluid_ct2hzPtr.asFunction<double Function(double)>();

  double fluid_cb2amp(
    double cb,
  ) {
    return _fluid_cb2amp(
      cb,
    );
  }

  late final _fluid_cb2ampPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_cb2amp');
  late final _fluid_cb2amp =
      _fluid_cb2ampPtr.asFunction<double Function(double)>();

  double fluid_atten2amp(
    double atten,
  ) {
    return _fluid_atten2amp(
      atten,
    );
  }

  late final _fluid_atten2ampPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_atten2amp');
  late final _fluid_atten2amp =
      _fluid_atten2ampPtr.asFunction<double Function(double)>();

  double fluid_tc2sec(
    double tc,
  ) {
    return _fluid_tc2sec(
      tc,
    );
  }

  late final _fluid_tc2secPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_tc2sec');
  late final _fluid_tc2sec =
      _fluid_tc2secPtr.asFunction<double Function(double)>();

  double fluid_tc2sec_delay(
    double tc,
  ) {
    return _fluid_tc2sec_delay(
      tc,
    );
  }

  late final _fluid_tc2sec_delayPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_tc2sec_delay');
  late final _fluid_tc2sec_delay =
      _fluid_tc2sec_delayPtr.asFunction<double Function(double)>();

  double fluid_tc2sec_attack(
    double tc,
  ) {
    return _fluid_tc2sec_attack(
      tc,
    );
  }

  late final _fluid_tc2sec_attackPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_tc2sec_attack');
  late final _fluid_tc2sec_attack =
      _fluid_tc2sec_attackPtr.asFunction<double Function(double)>();

  double fluid_tc2sec_release(
    double tc,
  ) {
    return _fluid_tc2sec_release(
      tc,
    );
  }

  late final _fluid_tc2sec_releasePtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_tc2sec_release');
  late final _fluid_tc2sec_release =
      _fluid_tc2sec_releasePtr.asFunction<double Function(double)>();

  double fluid_act2hz(
    double c,
  ) {
    return _fluid_act2hz(
      c,
    );
  }

  late final _fluid_act2hzPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_act2hz');
  late final _fluid_act2hz =
      _fluid_act2hzPtr.asFunction<double Function(double)>();

  double fluid_hz2ct(
    double c,
  ) {
    return _fluid_hz2ct(
      c,
    );
  }

  late final _fluid_hz2ctPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_hz2ct');
  late final _fluid_hz2ct =
      _fluid_hz2ctPtr.asFunction<double Function(double)>();

  double fluid_pan(
    double c,
    int left,
  ) {
    return _fluid_pan(
      c,
      left,
    );
  }

  late final _fluid_panPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t, ffi.Int)>>(
          'fluid_pan');
  late final _fluid_pan =
      _fluid_panPtr.asFunction<double Function(double, int)>();

  double fluid_concave(
    double val,
  ) {
    return _fluid_concave(
      val,
    );
  }

  late final _fluid_concavePtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_concave');
  late final _fluid_concave =
      _fluid_concavePtr.asFunction<double Function(double)>();

  double fluid_convex(
    double val,
  ) {
    return _fluid_convex(
      val,
    );
  }

  late final _fluid_convexPtr =
      _lookup<ffi.NativeFunction<fluid_real_t Function(fluid_real_t)>>(
          'fluid_convex');
  late final _fluid_convex =
      _fluid_convexPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_ct2hz_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_ct2hz_tab');

  ffi.Pointer<fluid_real_t> get fluid_ct2hz_tab => _fluid_ct2hz_tab.value;

  set fluid_ct2hz_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_ct2hz_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_vel2cb_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_vel2cb_tab');

  ffi.Pointer<fluid_real_t> get fluid_vel2cb_tab => _fluid_vel2cb_tab.value;

  set fluid_vel2cb_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_vel2cb_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_cb2amp_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_cb2amp_tab');

  ffi.Pointer<fluid_real_t> get fluid_cb2amp_tab => _fluid_cb2amp_tab.value;

  set fluid_cb2amp_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_cb2amp_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_posbp_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_posbp_tab');

  ffi.Pointer<fluid_real_t> get fluid_posbp_tab => _fluid_posbp_tab.value;

  set fluid_posbp_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_posbp_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_concave_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_concave_tab');

  ffi.Pointer<fluid_real_t> get fluid_concave_tab => _fluid_concave_tab.value;

  set fluid_concave_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_concave_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_convex_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_convex_tab');

  ffi.Pointer<fluid_real_t> get fluid_convex_tab => _fluid_convex_tab.value;

  set fluid_convex_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_convex_tab.value = value;

  late final ffi.Pointer<ffi.Pointer<fluid_real_t>> _fluid_pan_tab =
      _lookup<ffi.Pointer<fluid_real_t>>('fluid_pan_tab');

  ffi.Pointer<fluid_real_t> get fluid_pan_tab => _fluid_pan_tab.value;

  set fluid_pan_tab(ffi.Pointer<fluid_real_t> value) =>
      _fluid_pan_tab.value = value;

  void fluid_mod_clone(
    ffi.Pointer<fluid_mod_t> mod,
    ffi.Pointer<fluid_mod_t> src,
  ) {
    return _fluid_mod_clone(
      mod,
      src,
    );
  }

  late final _fluid_mod_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_mod_t>,
              ffi.Pointer<fluid_mod_t>)>>('fluid_mod_clone');
  late final _fluid_mod_clone = _fluid_mod_clonePtr.asFunction<
      void Function(ffi.Pointer<fluid_mod_t>, ffi.Pointer<fluid_mod_t>)>();

  double fluid_mod_get_value(
    ffi.Pointer<fluid_mod_t> mod,
    ffi.Pointer<fluid_channel_t> chan,
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_mod_get_value(
      mod,
      chan,
      voice,
    );
  }

  late final _fluid_mod_get_valuePtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_mod_t>,
              ffi.Pointer<fluid_channel_t>,
              ffi.Pointer<fluid_voice_t>)>>('fluid_mod_get_value');
  late final _fluid_mod_get_value = _fluid_mod_get_valuePtr.asFunction<
      double Function(ffi.Pointer<fluid_mod_t>, ffi.Pointer<fluid_channel_t>,
          ffi.Pointer<fluid_voice_t>)>();

  void fluid_dump_modulator(
    ffi.Pointer<fluid_mod_t> mod,
  ) {
    return _fluid_dump_modulator(
      mod,
    );
  }

  late final _fluid_dump_modulatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_mod_t>)>>(
          'fluid_dump_modulator');
  late final _fluid_dump_modulator = _fluid_dump_modulatorPtr
      .asFunction<void Function(ffi.Pointer<fluid_mod_t>)>();

  ffi.Pointer<fluid_voice_t> new_fluid_voice(
    double output_rate,
  ) {
    return _new_fluid_voice(
      output_rate,
    );
  }

  late final _new_fluid_voicePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<fluid_voice_t> Function(fluid_real_t)>>(
      'new_fluid_voice');
  late final _new_fluid_voice = _new_fluid_voicePtr
      .asFunction<ffi.Pointer<fluid_voice_t> Function(double)>();

  int delete_fluid_voice(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _delete_fluid_voice(
      voice,
    );
  }

  late final _delete_fluid_voicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'delete_fluid_voice');
  late final _delete_fluid_voice = _delete_fluid_voicePtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  void fluid_voice_start(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_start(
      voice,
    );
  }

  late final _fluid_voice_startPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_voice_t>)>>(
      'fluid_voice_start');
  late final _fluid_voice_start = _fluid_voice_startPtr
      .asFunction<void Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_write(
    ffi.Pointer<fluid_voice_t> voice,
    ffi.Pointer<fluid_real_t> left,
    ffi.Pointer<fluid_real_t> right,
    ffi.Pointer<fluid_real_t> reverb_buf,
    ffi.Pointer<fluid_real_t> chorus_buf,
  ) {
    return _fluid_voice_write(
      voice,
      left,
      right,
      reverb_buf,
      chorus_buf,
    );
  }

  late final _fluid_voice_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_voice_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>>('fluid_voice_write');
  late final _fluid_voice_write = _fluid_voice_writePtr.asFunction<
      int Function(
          ffi.Pointer<fluid_voice_t>,
          ffi.Pointer<fluid_real_t>,
          ffi.Pointer<fluid_real_t>,
          ffi.Pointer<fluid_real_t>,
          ffi.Pointer<fluid_real_t>)>();

  int fluid_voice_init(
    ffi.Pointer<fluid_voice_t> voice,
    ffi.Pointer<fluid_sample_t> sample,
    ffi.Pointer<fluid_channel_t> channel,
    int key,
    int vel,
    int id,
    int time,
    double gain,
  ) {
    return _fluid_voice_init(
      voice,
      sample,
      channel,
      key,
      vel,
      id,
      time,
      gain,
    );
  }

  late final _fluid_voice_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_voice_t>,
              ffi.Pointer<fluid_sample_t>,
              ffi.Pointer<fluid_channel_t>,
              ffi.Int,
              ffi.Int,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              fluid_real_t)>>('fluid_voice_init');
  late final _fluid_voice_init = _fluid_voice_initPtr.asFunction<
      int Function(ffi.Pointer<fluid_voice_t>, ffi.Pointer<fluid_sample_t>,
          ffi.Pointer<fluid_channel_t>, int, int, int, int, double)>();

  int fluid_voice_modulate(
    ffi.Pointer<fluid_voice_t> voice,
    int cc,
    int ctrl,
  ) {
    return _fluid_voice_modulate(
      voice,
      cc,
      ctrl,
    );
  }

  late final _fluid_voice_modulatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_voice_t>, ffi.Int,
              ffi.Int)>>('fluid_voice_modulate');
  late final _fluid_voice_modulate = _fluid_voice_modulatePtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>, int, int)>();

  int fluid_voice_modulate_all(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_modulate_all(
      voice,
    );
  }

  late final _fluid_voice_modulate_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_modulate_all');
  late final _fluid_voice_modulate_all = _fluid_voice_modulate_allPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  /// Set the NRPN value of a generator.
  int fluid_voice_set_param(
    ffi.Pointer<fluid_voice_t> voice,
    int gen,
    double value,
    int abs,
  ) {
    return _fluid_voice_set_param(
      voice,
      gen,
      value,
      abs,
    );
  }

  late final _fluid_voice_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_voice_t>, ffi.Int, fluid_real_t,
              ffi.Int)>>('fluid_voice_set_param');
  late final _fluid_voice_set_param = _fluid_voice_set_paramPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>, int, double, int)>();

  /// Set the gain.
  int fluid_voice_set_gain(
    ffi.Pointer<fluid_voice_t> voice,
    double gain,
  ) {
    return _fluid_voice_set_gain(
      voice,
      gain,
    );
  }

  late final _fluid_voice_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_voice_t>,
              fluid_real_t)>>('fluid_voice_set_gain');
  late final _fluid_voice_set_gain = _fluid_voice_set_gainPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>, double)>();

  int fluid_voice_noteoff(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_noteoff(
      voice,
    );
  }

  late final _fluid_voice_noteoffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_noteoff');
  late final _fluid_voice_noteoff = _fluid_voice_noteoffPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_off(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_off(
      voice,
    );
  }

  late final _fluid_voice_offPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_off');
  late final _fluid_voice_off = _fluid_voice_offPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_voice_calculate_runtime_synthesis_parameters(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_calculate_runtime_synthesis_parameters(
      voice,
    );
  }

  late final _fluid_voice_calculate_runtime_synthesis_parametersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_calculate_runtime_synthesis_parameters');
  late final _fluid_voice_calculate_runtime_synthesis_parameters =
      _fluid_voice_calculate_runtime_synthesis_parametersPtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  ffi.Pointer<fluid_channel_t> fluid_voice_get_channel(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_channel(
      voice,
    );
  }

  late final _fluid_voice_get_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_channel_t> Function(
              ffi.Pointer<fluid_voice_t>)>>('fluid_voice_get_channel');
  late final _fluid_voice_get_channel = _fluid_voice_get_channelPtr.asFunction<
      ffi.Pointer<fluid_channel_t> Function(ffi.Pointer<fluid_voice_t>)>();

  int calculate_hold_decay_buffers(
    ffi.Pointer<fluid_voice_t> voice,
    int gen_base,
    int gen_key2base,
    int is_decay,
  ) {
    return _calculate_hold_decay_buffers(
      voice,
      gen_base,
      gen_key2base,
      is_decay,
    );
  }

  late final _calculate_hold_decay_buffersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_voice_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('calculate_hold_decay_buffers');
  late final _calculate_hold_decay_buffers = _calculate_hold_decay_buffersPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>, int, int, int)>();

  int fluid_voice_kill_excl(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_kill_excl(
      voice,
    );
  }

  late final _fluid_voice_kill_exclPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_kill_excl');
  late final _fluid_voice_kill_excl = _fluid_voice_kill_exclPtr
      .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  double fluid_voice_get_lower_boundary_for_attenuation(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_get_lower_boundary_for_attenuation(
      voice,
    );
  }

  late final _fluid_voice_get_lower_boundary_for_attenuationPtr = _lookup<
          ffi
          .NativeFunction<fluid_real_t Function(ffi.Pointer<fluid_voice_t>)>>(
      'fluid_voice_get_lower_boundary_for_attenuation');
  late final _fluid_voice_get_lower_boundary_for_attenuation =
      _fluid_voice_get_lower_boundary_for_attenuationPtr
          .asFunction<double Function(ffi.Pointer<fluid_voice_t>)>();

  double fluid_voice_determine_amplitude_that_reaches_noise_floor_for_sample(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_determine_amplitude_that_reaches_noise_floor_for_sample(
      voice,
    );
  }

  late final _fluid_voice_determine_amplitude_that_reaches_noise_floor_for_samplePtr =
      _lookup<
              ffi.NativeFunction<
                  fluid_real_t Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_voice_determine_amplitude_that_reaches_noise_floor_for_sample');
  late final _fluid_voice_determine_amplitude_that_reaches_noise_floor_for_sample =
      _fluid_voice_determine_amplitude_that_reaches_noise_floor_for_samplePtr
          .asFunction<double Function(ffi.Pointer<fluid_voice_t>)>();

  void fluid_voice_check_sample_sanity(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_voice_check_sample_sanity(
      voice,
    );
  }

  late final _fluid_voice_check_sample_sanityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_voice_t>)>>(
      'fluid_voice_check_sample_sanity');
  late final _fluid_voice_check_sample_sanity =
      _fluid_voice_check_sample_sanityPtr
          .asFunction<void Function(ffi.Pointer<fluid_voice_t>)>();

  double fluid_voice_gen_value(
    ffi.Pointer<fluid_voice_t> voice,
    int num,
  ) {
    return _fluid_voice_gen_value(
      voice,
      num,
    );
  }

  late final _fluid_voice_gen_valuePtr = _lookup<
      ffi.NativeFunction<
          fluid_real_t Function(
              ffi.Pointer<fluid_voice_t>, ffi.Int)>>('fluid_voice_gen_value');
  late final _fluid_voice_gen_value = _fluid_voice_gen_valuePtr
      .asFunction<double Function(ffi.Pointer<fluid_voice_t>, int)>();

  void fluid_dsp_float_config() {
    return _fluid_dsp_float_config();
  }

  late final _fluid_dsp_float_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'fluid_dsp_float_config');
  late final _fluid_dsp_float_config =
      _fluid_dsp_float_configPtr.asFunction<void Function()>();

  int fluid_dsp_float_interpolate_none(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_dsp_float_interpolate_none(
      voice,
    );
  }

  late final _fluid_dsp_float_interpolate_nonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_dsp_float_interpolate_none');
  late final _fluid_dsp_float_interpolate_none =
      _fluid_dsp_float_interpolate_nonePtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_dsp_float_interpolate_linear(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_dsp_float_interpolate_linear(
      voice,
    );
  }

  late final _fluid_dsp_float_interpolate_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_dsp_float_interpolate_linear');
  late final _fluid_dsp_float_interpolate_linear =
      _fluid_dsp_float_interpolate_linearPtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_dsp_float_interpolate_4th_order(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_dsp_float_interpolate_4th_order(
      voice,
    );
  }

  late final _fluid_dsp_float_interpolate_4th_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_dsp_float_interpolate_4th_order');
  late final _fluid_dsp_float_interpolate_4th_order =
      _fluid_dsp_float_interpolate_4th_orderPtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  int fluid_dsp_float_interpolate_7th_order(
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_dsp_float_interpolate_7th_order(
      voice,
    );
  }

  late final _fluid_dsp_float_interpolate_7th_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_voice_t>)>>(
          'fluid_dsp_float_interpolate_7th_order');
  late final _fluid_dsp_float_interpolate_7th_order =
      _fluid_dsp_float_interpolate_7th_orderPtr
          .asFunction<int Function(ffi.Pointer<fluid_voice_t>)>();

  ffi.Pointer<fluid_chorus_t> new_fluid_chorus(
    double sample_rate,
  ) {
    return _new_fluid_chorus(
      sample_rate,
    );
  }

  late final _new_fluid_chorusPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<fluid_chorus_t> Function(fluid_real_t)>>(
      'new_fluid_chorus');
  late final _new_fluid_chorus = _new_fluid_chorusPtr
      .asFunction<ffi.Pointer<fluid_chorus_t> Function(double)>();

  void delete_fluid_chorus(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _delete_fluid_chorus(
      chorus,
    );
  }

  late final _delete_fluid_chorusPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_chorus_t>)>>(
      'delete_fluid_chorus');
  late final _delete_fluid_chorus = _delete_fluid_chorusPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>)>();

  void fluid_chorus_processmix(
    ffi.Pointer<fluid_chorus_t> chorus,
    ffi.Pointer<fluid_real_t> in1,
    ffi.Pointer<fluid_real_t> left_out,
    ffi.Pointer<fluid_real_t> right_out,
  ) {
    return _fluid_chorus_processmix(
      chorus,
      in1,
      left_out,
      right_out,
    );
  }

  late final _fluid_chorus_processmixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_chorus_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>>('fluid_chorus_processmix');
  late final _fluid_chorus_processmix = _fluid_chorus_processmixPtr.asFunction<
      void Function(ffi.Pointer<fluid_chorus_t>, ffi.Pointer<fluid_real_t>,
          ffi.Pointer<fluid_real_t>, ffi.Pointer<fluid_real_t>)>();

  void fluid_chorus_processreplace(
    ffi.Pointer<fluid_chorus_t> chorus,
    ffi.Pointer<fluid_real_t> in1,
    ffi.Pointer<fluid_real_t> left_out,
    ffi.Pointer<fluid_real_t> right_out,
  ) {
    return _fluid_chorus_processreplace(
      chorus,
      in1,
      left_out,
      right_out,
    );
  }

  late final _fluid_chorus_processreplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_chorus_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>)>>('fluid_chorus_processreplace');
  late final _fluid_chorus_processreplace =
      _fluid_chorus_processreplacePtr.asFunction<
          void Function(ffi.Pointer<fluid_chorus_t>, ffi.Pointer<fluid_real_t>,
              ffi.Pointer<fluid_real_t>, ffi.Pointer<fluid_real_t>)>();

  int fluid_chorus_init(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_init(
      chorus,
    );
  }

  late final _fluid_chorus_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_init');
  late final _fluid_chorus_init = _fluid_chorus_initPtr
      .asFunction<int Function(ffi.Pointer<fluid_chorus_t>)>();

  void fluid_chorus_reset(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_reset(
      chorus,
    );
  }

  late final _fluid_chorus_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_reset');
  late final _fluid_chorus_reset = _fluid_chorus_resetPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>)>();

  void fluid_chorus_set_nr(
    ffi.Pointer<fluid_chorus_t> chorus,
    int nr,
  ) {
    return _fluid_chorus_set_nr(
      chorus,
      nr,
    );
  }

  late final _fluid_chorus_set_nrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_chorus_t>, ffi.Int)>>('fluid_chorus_set_nr');
  late final _fluid_chorus_set_nr = _fluid_chorus_set_nrPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>, int)>();

  void fluid_chorus_set_level(
    ffi.Pointer<fluid_chorus_t> chorus,
    double level,
  ) {
    return _fluid_chorus_set_level(
      chorus,
      level,
    );
  }

  late final _fluid_chorus_set_levelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_chorus_t>,
              fluid_real_t)>>('fluid_chorus_set_level');
  late final _fluid_chorus_set_level = _fluid_chorus_set_levelPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>, double)>();

  void fluid_chorus_set_speed_Hz(
    ffi.Pointer<fluid_chorus_t> chorus,
    double speed_Hz,
  ) {
    return _fluid_chorus_set_speed_Hz(
      chorus,
      speed_Hz,
    );
  }

  late final _fluid_chorus_set_speed_HzPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_chorus_t>,
              fluid_real_t)>>('fluid_chorus_set_speed_Hz');
  late final _fluid_chorus_set_speed_Hz = _fluid_chorus_set_speed_HzPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>, double)>();

  void fluid_chorus_set_depth_ms(
    ffi.Pointer<fluid_chorus_t> chorus,
    double depth_ms,
  ) {
    return _fluid_chorus_set_depth_ms(
      chorus,
      depth_ms,
    );
  }

  late final _fluid_chorus_set_depth_msPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_chorus_t>,
              fluid_real_t)>>('fluid_chorus_set_depth_ms');
  late final _fluid_chorus_set_depth_ms = _fluid_chorus_set_depth_msPtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>, double)>();

  void fluid_chorus_set_type(
    ffi.Pointer<fluid_chorus_t> chorus,
    int type,
  ) {
    return _fluid_chorus_set_type(
      chorus,
      type,
    );
  }

  late final _fluid_chorus_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<fluid_chorus_t>, ffi.Int)>>('fluid_chorus_set_type');
  late final _fluid_chorus_set_type = _fluid_chorus_set_typePtr
      .asFunction<void Function(ffi.Pointer<fluid_chorus_t>, int)>();

  int fluid_chorus_update(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_update(
      chorus,
    );
  }

  late final _fluid_chorus_updatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_update');
  late final _fluid_chorus_update = _fluid_chorus_updatePtr
      .asFunction<int Function(ffi.Pointer<fluid_chorus_t>)>();

  int fluid_chorus_get_nr(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_get_nr(
      chorus,
    );
  }

  late final _fluid_chorus_get_nrPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_get_nr');
  late final _fluid_chorus_get_nr = _fluid_chorus_get_nrPtr
      .asFunction<int Function(ffi.Pointer<fluid_chorus_t>)>();

  double fluid_chorus_get_level(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_get_level(
      chorus,
    );
  }

  late final _fluid_chorus_get_levelPtr = _lookup<
          ffi
          .NativeFunction<fluid_real_t Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_get_level');
  late final _fluid_chorus_get_level = _fluid_chorus_get_levelPtr
      .asFunction<double Function(ffi.Pointer<fluid_chorus_t>)>();

  double fluid_chorus_get_speed_Hz(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_get_speed_Hz(
      chorus,
    );
  }

  late final _fluid_chorus_get_speed_HzPtr = _lookup<
          ffi
          .NativeFunction<fluid_real_t Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_get_speed_Hz');
  late final _fluid_chorus_get_speed_Hz = _fluid_chorus_get_speed_HzPtr
      .asFunction<double Function(ffi.Pointer<fluid_chorus_t>)>();

  double fluid_chorus_get_depth_ms(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_get_depth_ms(
      chorus,
    );
  }

  late final _fluid_chorus_get_depth_msPtr = _lookup<
          ffi
          .NativeFunction<fluid_real_t Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_get_depth_ms');
  late final _fluid_chorus_get_depth_ms = _fluid_chorus_get_depth_msPtr
      .asFunction<double Function(ffi.Pointer<fluid_chorus_t>)>();

  int fluid_chorus_get_type(
    ffi.Pointer<fluid_chorus_t> chorus,
  ) {
    return _fluid_chorus_get_type(
      chorus,
    );
  }

  late final _fluid_chorus_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<fluid_chorus_t>)>>(
      'fluid_chorus_get_type');
  late final _fluid_chorus_get_type = _fluid_chorus_get_typePtr
      .asFunction<int Function(ffi.Pointer<fluid_chorus_t>)>();

  void fluid_sys_config() {
    return _fluid_sys_config();
  }

  late final _fluid_sys_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fluid_sys_config');
  late final _fluid_sys_config =
      _fluid_sys_configPtr.asFunction<void Function()>();

  void fluid_log_config() {
    return _fluid_log_config();
  }

  late final _fluid_log_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fluid_log_config');
  late final _fluid_log_config =
      _fluid_log_configPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> fluid_strtok(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
    ffi.Pointer<ffi.Char> delim,
  ) {
    return _fluid_strtok(
      str,
      delim,
    );
  }

  late final _fluid_strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('fluid_strtok');
  late final _fluid_strtok = _fluid_strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  /// Additional debugging system, separate from the log system. This
  /// allows to print selected debug messages of a specific subsystem.
  late final ffi.Pointer<ffi.UnsignedInt> _fluid_debug_flags =
      _lookup<ffi.UnsignedInt>('fluid_debug_flags');

  int get fluid_debug_flags => _fluid_debug_flags.value;

  set fluid_debug_flags(int value) => _fluid_debug_flags.value = value;

  int fluid_debug(
    int level,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _fluid_debug(
      level,
      fmt,
    );
  }

  late final _fluid_debugPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'fluid_debug');
  late final _fluid_debug =
      _fluid_debugPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_synth_setstr(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _fluid_synth_setstr(
      synth,
      name,
      str,
    );
  }

  late final _fluid_synth_setstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('fluid_synth_setstr');
  late final _fluid_synth_setstr = _fluid_synth_setstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// returns 1 if the value exists, 0 otherwise
  int fluid_synth_getstr(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str,
  ) {
    return _fluid_synth_getstr(
      synth,
      name,
      str,
    );
  }

  late final _fluid_synth_getstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fluid_synth_getstr');
  late final _fluid_synth_getstr = _fluid_synth_getstrPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_synth_setnum(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    double val,
  ) {
    return _fluid_synth_setnum(
      synth,
      name,
      val,
    );
  }

  late final _fluid_synth_setnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('fluid_synth_setnum');
  late final _fluid_synth_setnum = _fluid_synth_setnumPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, double)>();

  /// returns 1 if the value exists, 0 otherwise
  int fluid_synth_getnum(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _fluid_synth_getnum(
      synth,
      name,
      val,
    );
  }

  late final _fluid_synth_getnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('fluid_synth_getnum');
  late final _fluid_synth_getnum = _fluid_synth_getnumPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Double>)>();

  /// returns 1 if the value has been set, 0 otherwise
  int fluid_synth_setint(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    int val,
  ) {
    return _fluid_synth_setint(
      synth,
      name,
      val,
    );
  }

  late final _fluid_synth_setintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_synth_setint');
  late final _fluid_synth_setint = _fluid_synth_setintPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, int)>();

  /// returns 1 if the value exists, 0 otherwise
  int fluid_synth_getint(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _fluid_synth_getint(
      synth,
      name,
      val,
    );
  }

  late final _fluid_synth_getintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('fluid_synth_getint');
  late final _fluid_synth_getint = _fluid_synth_getintPtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int fluid_synth_set_reverb_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int num,
  ) {
    return _fluid_synth_set_reverb_preset(
      synth,
      num,
    );
  }

  late final _fluid_synth_set_reverb_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_set_reverb_preset');
  late final _fluid_synth_set_reverb_preset = _fluid_synth_set_reverb_presetPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_one_block(
    ffi.Pointer<fluid_synth_t> synth,
    int do_not_mix_fx_to_out,
  ) {
    return _fluid_synth_one_block(
      synth,
      do_not_mix_fx_to_out,
    );
  }

  late final _fluid_synth_one_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Int)>>('fluid_synth_one_block');
  late final _fluid_synth_one_block = _fluid_synth_one_blockPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  ffi.Pointer<fluid_preset_t> fluid_synth_get_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfontnum,
    int banknum,
    int prognum,
  ) {
    return _fluid_synth_get_preset(
      synth,
      sfontnum,
      banknum,
      prognum,
    );
  }

  late final _fluid_synth_get_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(
              ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('fluid_synth_get_preset');
  late final _fluid_synth_get_preset = _fluid_synth_get_presetPtr.asFunction<
      ffi.Pointer<fluid_preset_t> Function(
          ffi.Pointer<fluid_synth_t>, int, int, int)>();

  ffi.Pointer<fluid_preset_t> fluid_synth_find_preset(
    ffi.Pointer<fluid_synth_t> synth,
    int banknum,
    int prognum,
  ) {
    return _fluid_synth_find_preset(
      synth,
      banknum,
      prognum,
    );
  }

  late final _fluid_synth_find_presetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('fluid_synth_find_preset');
  late final _fluid_synth_find_preset = _fluid_synth_find_presetPtr.asFunction<
      ffi.Pointer<fluid_preset_t> Function(
          ffi.Pointer<fluid_synth_t>, int, int)>();

  int fluid_synth_all_notes_off(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_all_notes_off(
      synth,
      chan,
    );
  }

  late final _fluid_synth_all_notes_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_all_notes_off');
  late final _fluid_synth_all_notes_off = _fluid_synth_all_notes_offPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_all_sounds_off(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_all_sounds_off(
      synth,
      chan,
    );
  }

  late final _fluid_synth_all_sounds_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_all_sounds_off');
  late final _fluid_synth_all_sounds_off = _fluid_synth_all_sounds_offPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_modulate_voices(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int is_cc,
    int ctrl,
  ) {
    return _fluid_synth_modulate_voices(
      synth,
      chan,
      is_cc,
      ctrl,
    );
  }

  late final _fluid_synth_modulate_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('fluid_synth_modulate_voices');
  late final _fluid_synth_modulate_voices = _fluid_synth_modulate_voicesPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int, int, int)>();

  int fluid_synth_modulate_voices_all(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_modulate_voices_all(
      synth,
      chan,
    );
  }

  late final _fluid_synth_modulate_voices_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_modulate_voices_all');
  late final _fluid_synth_modulate_voices_all =
      _fluid_synth_modulate_voices_allPtr
          .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_damp_voices(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
  ) {
    return _fluid_synth_damp_voices(
      synth,
      chan,
    );
  }

  late final _fluid_synth_damp_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Int)>>('fluid_synth_damp_voices');
  late final _fluid_synth_damp_voices = _fluid_synth_damp_voicesPtr
      .asFunction<int Function(ffi.Pointer<fluid_synth_t>, int)>();

  int fluid_synth_kill_voice(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_synth_kill_voice(
      synth,
      voice,
    );
  }

  late final _fluid_synth_kill_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>,
              ffi.Pointer<fluid_voice_t>)>>('fluid_synth_kill_voice');
  late final _fluid_synth_kill_voice = _fluid_synth_kill_voicePtr.asFunction<
      int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_voice_t>)>();

  void fluid_synth_kill_by_exclusive_class(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<fluid_voice_t> voice,
  ) {
    return _fluid_synth_kill_by_exclusive_class(
      synth,
      voice,
    );
  }

  late final _fluid_synth_kill_by_exclusive_classPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_voice_t>)>>(
      'fluid_synth_kill_by_exclusive_class');
  late final _fluid_synth_kill_by_exclusive_class =
      _fluid_synth_kill_by_exclusive_classPtr.asFunction<
          void Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<fluid_voice_t>)>();

  void fluid_synth_release_voice_on_same_note(
    ffi.Pointer<fluid_synth_t> synth,
    int chan,
    int key,
  ) {
    return _fluid_synth_release_voice_on_same_note(
      synth,
      chan,
      key,
    );
  }

  late final _fluid_synth_release_voice_on_same_notePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>, ffi.Int,
              ffi.Int)>>('fluid_synth_release_voice_on_same_note');
  late final _fluid_synth_release_voice_on_same_note =
      _fluid_synth_release_voice_on_same_notePtr
          .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int, int)>();

  void fluid_synth_sfunload_macos9(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_sfunload_macos9(
      synth,
    );
  }

  late final _fluid_synth_sfunload_macos9Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_sfunload_macos9');
  late final _fluid_synth_sfunload_macos9 = _fluid_synth_sfunload_macos9Ptr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  void fluid_synth_print_voice(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_print_voice(
      synth,
    );
  }

  late final _fluid_synth_print_voicePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_print_voice');
  late final _fluid_synth_print_voice = _fluid_synth_print_voicePtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  /// This function assures that every MIDI channels has a valid preset
  /// (NULL is okay). This function is called after a SoundFont is
  /// unloaded or reloaded.
  void fluid_synth_update_presets(
    ffi.Pointer<fluid_synth_t> synth,
  ) {
    return _fluid_synth_update_presets(
      synth,
    );
  }

  late final _fluid_synth_update_presetsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_synth_t>)>>(
      'fluid_synth_update_presets');
  late final _fluid_synth_update_presets = _fluid_synth_update_presetsPtr
      .asFunction<void Function(ffi.Pointer<fluid_synth_t>)>();

  int fluid_synth_update_gain(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    double value,
  ) {
    return _fluid_synth_update_gain(
      synth,
      name,
      value,
    );
  }

  late final _fluid_synth_update_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('fluid_synth_update_gain');
  late final _fluid_synth_update_gain = _fluid_synth_update_gainPtr.asFunction<
      int Function(
          ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, double)>();

  int fluid_synth_update_polyphony(
    ffi.Pointer<fluid_synth_t> synth,
    ffi.Pointer<ffi.Char> name,
    int value,
  ) {
    return _fluid_synth_update_polyphony(
      synth,
      name,
      value,
    );
  }

  late final _fluid_synth_update_polyphonyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fluid_synth_update_polyphony');
  late final _fluid_synth_update_polyphony =
      _fluid_synth_update_polyphonyPtr.asFunction<
          int Function(
              ffi.Pointer<fluid_synth_t>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<fluid_bank_offset_t> fluid_synth_get_bank_offset0(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
  ) {
    return _fluid_synth_get_bank_offset0(
      synth,
      sfont_id,
    );
  }

  late final _fluid_synth_get_bank_offset0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fluid_bank_offset_t> Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_get_bank_offset0');
  late final _fluid_synth_get_bank_offset0 =
      _fluid_synth_get_bank_offset0Ptr.asFunction<
          ffi.Pointer<fluid_bank_offset_t> Function(
              ffi.Pointer<fluid_synth_t>, int)>();

  void fluid_synth_remove_bank_offset(
    ffi.Pointer<fluid_synth_t> synth,
    int sfont_id,
  ) {
    return _fluid_synth_remove_bank_offset(
      synth,
      sfont_id,
    );
  }

  late final _fluid_synth_remove_bank_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<fluid_synth_t>,
              ffi.Int)>>('fluid_synth_remove_bank_offset');
  late final _fluid_synth_remove_bank_offset =
      _fluid_synth_remove_bank_offsetPtr
          .asFunction<void Function(ffi.Pointer<fluid_synth_t>, int)>();

  void fluid_synth_dither_s16(
    ffi.Pointer<ffi.Int> dither_index,
    int len,
    ffi.Pointer<ffi.Float> lin,
    ffi.Pointer<ffi.Float> rin,
    ffi.Pointer<ffi.Void> lout,
    int loff,
    int lincr,
    ffi.Pointer<ffi.Void> rout,
    int roff,
    int rincr,
  ) {
    return _fluid_synth_dither_s16(
      dither_index,
      len,
      lin,
      rin,
      lout,
      loff,
      lincr,
      rout,
      roff,
      rincr,
    );
  }

  late final _fluid_synth_dither_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('fluid_synth_dither_s16');
  late final _fluid_synth_dither_s16 = _fluid_synth_dither_s16Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          int)>();

  void fluid_synth_settings(
    ffi.Pointer<fluid_settings_t> settings,
  ) {
    return _fluid_synth_settings(
      settings,
    );
  }

  late final _fluid_synth_settingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fluid_settings_t>)>>(
      'fluid_synth_settings');
  late final _fluid_synth_settings = _fluid_synth_settingsPtr
      .asFunction<void Function(ffi.Pointer<fluid_settings_t>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef rsize_t = __darwin_size_t;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError("Unknown value for idtype_t: $value"),
      };
}

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_suseconds_t = __int32_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;
typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef FILE = __sFILE;
typedef va_list = __darwin_va_list;
typedef __darwin_va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef off_t = __darwin_off_t;

final class __float2 extends ffi.Struct {
  @ffi.Float()
  external double __sinval;

  @ffi.Float()
  external double __cosval;
}

final class __double2 extends ffi.Struct {
  @ffi.Double()
  external double __sinval;

  @ffi.Double()
  external double __cosval;
}

final class exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

final class flock extends ffi.Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;
}

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

final class radvisory extends ffi.Struct {
  @off_t()
  external int ra_offset;

  @ffi.Int()
  external int ra_count;
}

final class fsignatures extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  external ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Size()
  external int fs_fsignatures_size;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> fs_cdhash;

  @ffi.Int()
  external int fs_hash_type;
}

final class fsupplement extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Int()
  external int fs_orig_fd;
}

final class fchecklv extends ffi.Struct {
  @off_t()
  external int lv_file_start;

  @ffi.Size()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

final class fgetsigsinfo extends ffi.Struct {
  @off_t()
  external int fg_file_start;

  @ffi.Int()
  external int fg_info_request;

  @ffi.Int()
  external int fg_sig_is_platform;
}

final class fstore extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fst_flags;

  @ffi.Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

final class fpunchhole extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fp_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

final class ftrimactivefile extends ffi.Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

final class fspecread extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fsr_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

final class fattributiontag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ft_flags;

  @ffi.UnsignedLongLong()
  external int ft_hash;

  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> ft_attribution_name;
}

@ffi.Packed(4)
final class log2phys extends ffi.Struct {
  @ffi.UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

final class _filesec extends ffi.Opaque {}

enum filesec_property_t {
  FILESEC_OWNER(1),
  FILESEC_GROUP(2),
  FILESEC_UUID(3),
  FILESEC_MODE(4),
  FILESEC_ACL(5),
  FILESEC_GRPUUID(6),
  FILESEC_ACL_RAW(100),
  FILESEC_ACL_ALLOCSIZE(101);

  final int value;
  const filesec_property_t(this.value);

  static filesec_property_t fromValue(int value) => switch (value) {
        1 => FILESEC_OWNER,
        2 => FILESEC_GROUP,
        3 => FILESEC_UUID,
        4 => FILESEC_MODE,
        5 => FILESEC_ACL,
        6 => FILESEC_GRPUUID,
        100 => FILESEC_ACL_RAW,
        101 => FILESEC_ACL_ALLOCSIZE,
        _ =>
          throw ArgumentError("Unknown value for filesec_property_t: $value"),
      };
}

typedef filesec_t = ffi.Pointer<_filesec>;

final class _fluid_hashtable_t extends ffi.Opaque {}

final class _fluid_synth_t extends ffi.Struct {
  external ffi.Pointer<fluid_settings_t> settings;

  /// the synthesizer settings
  @ffi.Int()
  external int polyphony;

  /// maximum polyphony
  @ffi.Char()
  external int with_reverb;

  /// Should the synth use the built-in reverb unit?
  @ffi.Char()
  external int with_chorus;

  /// Should the synth use the built-in chorus unit?
  @ffi.Char()
  external int verbose;

  /// Turn verbose mode on?
  @ffi.Char()
  external int dump;

  /// Dump events to stdout to hook up a user interface?
  @ffi.Double()
  external double sample_rate;

  /// The sample rate
  @ffi.Int()
  external int midi_channels;

  /// the number of MIDI channels (>= 16)
  @ffi.Int()
  external int audio_channels;

  /// the number of audio channels (1 channel=left+right)
  @ffi.Int()
  external int audio_groups;

  /// the number of (stereo) 'sub'groups from the synth.
  /// Typically equal to audio_channels.
  @ffi.Int()
  external int effects_channels;

  /// the number of effects channels (= 2)
  @ffi.UnsignedInt()
  external int state;

  /// the synthesizer state
  @ffi.UnsignedInt()
  external int ticks;

  /// the number of audio samples since the start
  external ffi.Pointer<fluid_list_t> loaders;

  /// the soundfont loaders
  external ffi.Pointer<fluid_list_t> sfont;

  /// the loaded soundfont
  @ffi.UnsignedInt()
  external int sfont_id;

  external ffi.Pointer<fluid_list_t> bank_offsets;

  @ffi.Double()
  external double gain;

  /// master gain
  external ffi.Pointer<ffi.Pointer<fluid_channel_t>> channel;

  /// the channels
  @ffi.Int()
  external int num_channels;

  /// the number of channels
  @ffi.Int()
  external int nvoice;

  /// the length of the synthesis process array
  external ffi.Pointer<ffi.Pointer<fluid_voice_t>> voice;

  /// the synthesis processes
  @ffi.UnsignedInt()
  external int noteid;

  /// the id is incremented for every new note. it's used for noteoff's
  @ffi.UnsignedInt()
  external int storeid;

  @ffi.Int()
  external int nbuf;

  /// How many audio buffers are used? (depends on nr of audio channels / groups)
  external ffi.Pointer<ffi.Pointer<fluid_real_t>> left_buf;

  external ffi.Pointer<ffi.Pointer<fluid_real_t>> right_buf;

  external ffi.Pointer<ffi.Pointer<fluid_real_t>> fx_left_buf;

  external ffi.Pointer<ffi.Pointer<fluid_real_t>> fx_right_buf;

  external ffi.Pointer<fluid_revmodel_t> reverb;

  external ffi.Pointer<fluid_chorus_t> chorus;

  @ffi.Int()
  external int cur;

  /// the current sample in the audio buffers to be output
  @ffi.Int()
  external int dither_index;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> outbuf;

  /// buffer for message output
  external ffi.Pointer<ffi.Pointer<ffi.Pointer<fluid_tuning_t>>> tuning;

  /// 128 banks of 128 programs for the tunings
  external ffi.Pointer<fluid_tuning_t> cur_tuning;

  /// < If note-offs are triggered just after a note-on, they will be delayed
  @ffi.UnsignedInt()
  external int min_note_length_ticks;
}

typedef fluid_settings_t = _fluid_hashtable_t;
typedef fluid_list_t = _fluid_list_t;

final class _fluid_list_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<fluid_list_t> next;
}

typedef fluid_channel_t = _fluid_channel_t;

final class _fluid_channel_t extends ffi.Opaque {}

typedef fluid_voice_t = _fluid_voice_t;

final class _fluid_voice_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int id;

  @ffi.UnsignedChar()
  external int status;

  @ffi.UnsignedChar()
  external int chan;

  @ffi.UnsignedChar()
  external int key;

  @ffi.UnsignedChar()
  external int vel;

  external ffi.Pointer<fluid_channel_t> channel;

  @ffi.Array.multi([60])
  external ffi.Array<fluid_gen_t> gen;

  @ffi.Array.multi([64])
  external ffi.Array<fluid_mod_t> mod;

  @ffi.Int()
  external int mod_count;

  @ffi.Int()
  external int has_looped;

  external ffi.Pointer<fluid_sample_t> sample;

  @ffi.Int()
  external int check_sample_sanity_flag;

  @fluid_real_t()
  external double output_rate;

  @ffi.UnsignedInt()
  external int start_time;

  @ffi.UnsignedInt()
  external int ticks;

  @ffi.UnsignedInt()
  external int noteoff_ticks;

  @fluid_real_t()
  external double amp;

  @fluid_phase_t()
  external int phase;

  @fluid_real_t()
  external double phase_incr;

  @fluid_real_t()
  external double amp_incr;

  external ffi.Pointer<fluid_real_t> dsp_buf;

  @fluid_real_t()
  external double pitch;

  @fluid_real_t()
  external double attenuation;

  @fluid_real_t()
  external double min_attenuation_cB;

  @fluid_real_t()
  external double root_pitch;

  @ffi.Int()
  external int start;

  @ffi.Int()
  external int end;

  @ffi.Int()
  external int loopstart;

  @ffi.Int()
  external int loopend;

  @fluid_real_t()
  external double synth_gain;

  @ffi.Array.multi([7])
  external ffi.Array<fluid_env_data_t> volenv_data;

  @ffi.UnsignedInt()
  external int volenv_count;

  @ffi.Int()
  external int volenv_section;

  @fluid_real_t()
  external double volenv_val;

  @fluid_real_t()
  external double amplitude_that_reaches_noise_floor_nonloop;

  @fluid_real_t()
  external double amplitude_that_reaches_noise_floor_loop;

  @ffi.Array.multi([7])
  external ffi.Array<fluid_env_data_t> modenv_data;

  @ffi.UnsignedInt()
  external int modenv_count;

  @ffi.Int()
  external int modenv_section;

  @fluid_real_t()
  external double modenv_val;

  @fluid_real_t()
  external double modenv_to_fc;

  @fluid_real_t()
  external double modenv_to_pitch;

  @fluid_real_t()
  external double modlfo_val;

  @ffi.UnsignedInt()
  external int modlfo_delay;

  @fluid_real_t()
  external double modlfo_incr;

  @fluid_real_t()
  external double modlfo_to_fc;

  @fluid_real_t()
  external double modlfo_to_pitch;

  @fluid_real_t()
  external double modlfo_to_vol;

  @fluid_real_t()
  external double viblfo_val;

  @ffi.UnsignedInt()
  external int viblfo_delay;

  @fluid_real_t()
  external double viblfo_incr;

  @fluid_real_t()
  external double viblfo_to_pitch;

  @fluid_real_t()
  external double fres;

  @fluid_real_t()
  external double last_fres;

  @fluid_real_t()
  external double q_lin;

  @fluid_real_t()
  external double filter_gain;

  @fluid_real_t()
  external double hist1;

  @fluid_real_t()
  external double hist2;

  @ffi.Int()
  external int filter_startup;

  @fluid_real_t()
  external double b02;

  @fluid_real_t()
  external double b1;

  @fluid_real_t()
  external double a1;

  @fluid_real_t()
  external double a2;

  @fluid_real_t()
  external double b02_incr;

  @fluid_real_t()
  external double b1_incr;

  @fluid_real_t()
  external double a1_incr;

  @fluid_real_t()
  external double a2_incr;

  @ffi.Int()
  external int filter_coeff_incr_count;

  @fluid_real_t()
  external double pan;

  @fluid_real_t()
  external double amp_left;

  @fluid_real_t()
  external double amp_right;

  @fluid_real_t()
  external double reverb_send;

  @fluid_real_t()
  external double amp_reverb;

  @fluid_real_t()
  external double chorus_send;

  @fluid_real_t()
  external double amp_chorus;

  @ffi.Int()
  external int interp_method;

  @ffi.Int()
  external int debug;
}

/// SoundFont generator structure.
typedef fluid_gen_t = _fluid_gen_t;

/// SoundFont generator structure.
final class _fluid_gen_t extends ffi.Struct {
  /// < Is the generator set or not (#fluid_gen_flags)
  @ffi.UnsignedChar()
  external int flags;

  /// < The nominal value
  @ffi.Double()
  external double val;

  /// < Change by modulators
  @ffi.Double()
  external double mod;

  /// < Change by NRPN messages
  @ffi.Double()
  external double nrpn;
}

typedef fluid_mod_t = _fluid_mod_t;

final class _fluid_mod_t extends ffi.Struct {
  @ffi.UnsignedChar()
  external int dest;

  @ffi.UnsignedChar()
  external int src1;

  @ffi.UnsignedChar()
  external int flags1;

  @ffi.UnsignedChar()
  external int src2;

  @ffi.UnsignedChar()
  external int flags2;

  @ffi.Double()
  external double amount;

  external ffi.Pointer<fluid_mod_t> next;
}

typedef fluid_sample_t = _fluid_sample_t;

final class _fluid_sample_t extends ffi.Struct {
  @ffi.Array.multi([21])
  external ffi.Array<ffi.Char> name;

  @ffi.UnsignedInt()
  external int start;

  @ffi.UnsignedInt()
  external int end;

  @ffi.UnsignedInt()
  external int loopstart;

  @ffi.UnsignedInt()
  external int loopend;

  @ffi.UnsignedInt()
  external int samplerate;

  @ffi.Int()
  external int origpitch;

  @ffi.Int()
  external int pitchadj;

  @ffi.Int()
  external int sampletype;

  @ffi.Int()
  external int valid;

  external ffi.Pointer<ffi.Short> data;

  /// The amplitude, that will lower the level of the sample's loop to
  /// the noise floor. Needed for note turnoff optimization, will be
  /// filled out automatically
  @ffi.Int()
  external int amplitude_that_reaches_noise_floor_is_valid;

  @ffi.Double()
  external double amplitude_that_reaches_noise_floor;

  /// Count the number of playing voices that use this sample.
  @ffi.UnsignedInt()
  external int refcount;

  /// Implement this function if the sample or SoundFont needs to be
  /// notified when the sample is no longer used.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_sample_t> sample, ffi.Int reason)>> notify;

  /// Pointer to SoundFont specific data
  external ffi.Pointer<ffi.Void> userdata;
}

typedef fluid_real_t = ffi.Float;
typedef Dartfluid_real_t = double;
typedef fluid_phase_t = ffi.UnsignedLongLong;
typedef Dartfluid_phase_t = int;

/// FORWARD DECLARATIONS
typedef fluid_env_data_t = _fluid_env_data_t;

final class _fluid_env_data_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int count;

  @fluid_real_t()
  external double coeff;

  @fluid_real_t()
  external double incr;

  @fluid_real_t()
  external double min;

  @fluid_real_t()
  external double max;
}

typedef fluid_revmodel_t = _fluid_revmodel_t;

final class _fluid_revmodel_t extends ffi.Opaque {}

typedef fluid_chorus_t = _fluid_chorus_t;

final class _fluid_chorus_t extends ffi.Opaque {}

typedef fluid_tuning_t = _fluid_tuning_t;

final class _fluid_tuning_t extends ffi.Opaque {}

final class _fluid_sfloader_t extends ffi.Struct {
  /// Private data
  external ffi.Pointer<ffi.Void> data;

  /// The free must free the memory allocated for the loader in
  /// addition to any private data. It should return 0 if no error
  /// occured, non-zero otherwise.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sfloader_t> loader)>> free;

  /// Load a file. Returns NULL if an error occured.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<fluid_sfont_t> Function(
              ffi.Pointer<fluid_sfloader_t> loader,
              ffi.Pointer<ffi.Char> filename)>> load;

  /// Callback structure specifying file operations used during soundfont loading to allow custom loading, such as from memory
  external ffi.Pointer<fluid_fileapi_t> fileapi;
}

typedef fluid_sfloader_t = _fluid_sfloader_t;
typedef fluid_sfont_t = _fluid_sfont_t;

final class _fluid_sfont_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.UnsignedInt()
  external int id;

  /// The 'free' callback function should return 0 when it was able to
  /// free all resources. It should return a non-zero value if some of
  /// the samples could not be freed because they are still in use.
  external ffi.Pointer<
      ffi
      .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_sfont_t> sfont)>> free;

  /// Return the name of the sfont
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<fluid_sfont_t> sfont)>>
      get_name;

  /// Return the preset with the specified bank and preset number. All
  /// the fields, including the 'sfont' field, should * be filled
  /// in. If the preset cannot be found, the function returns NULL.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<fluid_preset_t> Function(ffi.Pointer<fluid_sfont_t> sfont,
              ffi.UnsignedInt bank, ffi.UnsignedInt prenum)>> get_preset;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<fluid_sfont_t> sfont)>>
      iteration_start;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_sfont_t> sfont,
              ffi.Pointer<fluid_preset_t> preset)>> iteration_next;
}

typedef fluid_preset_t = _fluid_preset_t;

final class _fluid_preset_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<fluid_sfont_t> sfont;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_preset_t> preset)>>
      free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<fluid_preset_t> preset)>> get_name;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_preset_t> preset)>>
      get_banknum;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<fluid_preset_t> preset)>>
      get_num;

  /// handle a noteon event. Returns 0 if no error occured.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<fluid_preset_t> preset,
              ffi.Pointer<fluid_synth_t> synth,
              ffi.Int chan,
              ffi.Int key,
              ffi.Int vel)>> noteon;

  /// Implement this function if the preset needs to be notified about
  /// preset select and unselect events.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_preset_t> preset, ffi.Int reason,
              ffi.Int chan)>> notify;
}

typedef fluid_synth_t = _fluid_synth_t;
typedef fluid_fileapi_t = _fluid_fileapi_t;

/// File callback structure to enable custom soundfont loading (e.g. from memory).
final class _fluid_fileapi_t extends ffi.Struct {
  /// Private data
  external ffi.Pointer<ffi.Void> data;

  /// The free must free the memory allocated for the loader in
  /// addition to any private data. It should return 0 if no error
  /// occured, non-zero otherwise.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<fluid_fileapi_t> fileapi)>> free;

  /// Opens the file or memory indicated by \c filename in binary read mode.
  /// \c filename matches the one provided during the fluid_synth_sfload() call.
  ///
  /// @return returns a file handle on success, NULL otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<fluid_fileapi_t> fileapi,
              ffi.Pointer<ffi.Char> filename)>> fopen;

  /// Reads \c count bytes to the specified buffer \c buf.
  ///
  /// @return returns #FLUID_OK if exactly \c count bytes were successfully read, else #FLUID_FAILED
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> buf, ffi.Int count,
              ffi.Pointer<ffi.Void> handle)>> fread;

  /// Same purpose and behaviour as fseek.
  ///
  /// @param origin either \c SEEK_SET, \c SEEK_CUR or \c SEEK_END
  ///
  /// @return returns #FLUID_OK if the seek was successfully performed while not seeking beyond a buffer or file, #FLUID_FAILED otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void> handle, ffi.Long offset,
              ffi.Int origin)>> fseek;

  /// Closes the handle and frees used ressources.
  ///
  /// @return returns #FLUID_OK on success, #FLUID_FAILED on error
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> handle)>>
      fclose;

  /// @return returns current file offset or #FLUID_FAILED on error
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Void> handle)>>
      ftell;
}

final class _fluid_audio_driver_t extends ffi.Opaque {}

final class _fluid_player_t extends ffi.Opaque {}

final class _fluid_midi_event_t extends ffi.Opaque {}

final class _fluid_midi_driver_t extends ffi.Opaque {}

final class _fluid_midi_router_t extends ffi.Opaque {}

final class _fluid_midi_router_rule_t extends ffi.Opaque {}

final class _fluid_shell_t extends ffi.Opaque {}

final class _fluid_server_t extends ffi.Opaque {}

final class _fluid_event_t extends ffi.Opaque {}

final class _fluid_sequencer_t extends ffi.Opaque {}

final class _fluid_ramsfont_t extends ffi.Opaque {}

final class _fluid_rampreset_t extends ffi.Opaque {}

enum fluid_types_enum {
  FLUID_NO_TYPE(-1),
  FLUID_NUM_TYPE(0),
  FLUID_INT_TYPE(1),
  FLUID_STR_TYPE(2),
  FLUID_SET_TYPE(3);

  final int value;
  const fluid_types_enum(this.value);

  static fluid_types_enum fromValue(int value) => switch (value) {
        -1 => FLUID_NO_TYPE,
        0 => FLUID_NUM_TYPE,
        1 => FLUID_INT_TYPE,
        2 => FLUID_STR_TYPE,
        3 => FLUID_SET_TYPE,
        _ => throw ArgumentError("Unknown value for fluid_types_enum: $value"),
      };
}

enum fluid_chorus_mod {
  FLUID_CHORUS_MOD_SINE(0),
  FLUID_CHORUS_MOD_TRIANGLE(1);

  final int value;
  const fluid_chorus_mod(this.value);

  static fluid_chorus_mod fromValue(int value) => switch (value) {
        0 => FLUID_CHORUS_MOD_SINE,
        1 => FLUID_CHORUS_MOD_TRIANGLE,
        _ => throw ArgumentError("Unknown value for fluid_chorus_mod: $value"),
      };
}

enum fluid_interp {
  FLUID_INTERP_NONE(0),
  FLUID_INTERP_LINEAR(1),
  FLUID_INTERP_DEFAULT(4),
  FLUID_INTERP_7THORDER(7);

  static const FLUID_INTERP_4THORDER = FLUID_INTERP_DEFAULT;
  static const FLUID_INTERP_HIGHEST = FLUID_INTERP_7THORDER;

  final int value;
  const fluid_interp(this.value);

  static fluid_interp fromValue(int value) => switch (value) {
        0 => FLUID_INTERP_NONE,
        1 => FLUID_INTERP_LINEAR,
        4 => FLUID_INTERP_DEFAULT,
        7 => FLUID_INTERP_7THORDER,
        _ => throw ArgumentError("Unknown value for fluid_interp: $value"),
      };

  @override
  String toString() {
    if (this == FLUID_INTERP_DEFAULT)
      return "fluid_interp.FLUID_INTERP_DEFAULT, fluid_interp.FLUID_INTERP_4THORDER";
    if (this == FLUID_INTERP_7THORDER)
      return "fluid_interp.FLUID_INTERP_7THORDER, fluid_interp.FLUID_INTERP_HIGHEST";
    return super.toString();
  }
}

typedef fluid_ramsfont_t = _fluid_ramsfont_t;

/// FluidSynth log levels.
enum fluid_log_level {
  /// < The synth can't function correctly any more
  FLUID_PANIC(0),

  /// < Serious error occurred
  FLUID_ERR(1),

  /// < Warning
  FLUID_WARN(2),

  /// < Verbose informational messages
  FLUID_INFO(3),

  /// < Debugging messages
  FLUID_DBG(4),
  LAST_LOG_LEVEL(5);

  final int value;
  const fluid_log_level(this.value);

  static fluid_log_level fromValue(int value) => switch (value) {
        0 => FLUID_PANIC,
        1 => FLUID_ERR,
        2 => FLUID_WARN,
        3 => FLUID_INFO,
        4 => FLUID_DBG,
        5 => LAST_LOG_LEVEL,
        _ => throw ArgumentError("Unknown value for fluid_log_level: $value"),
      };
}

/// Log function handler callback type used by fluid_set_log_function().
/// @param level Log level (#fluid_log_level)
/// @param message Log message text
/// @param data User data pointer supplied to fluid_set_log_function().
typedef fluid_log_function_t
    = ffi.Pointer<ffi.NativeFunction<fluid_log_function_tFunction>>;
typedef fluid_log_function_tFunction = ffi.Void Function(
    ffi.Int level, ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Void> data);
typedef Dartfluid_log_function_tFunction = void Function(
    int level, ffi.Pointer<ffi.Char> message, ffi.Pointer<ffi.Void> data);

enum fluid_mod_flags {
  FLUID_MOD_POSITIVE(0),
  FLUID_MOD_NEGATIVE(1),
  FLUID_MOD_BIPOLAR(2),
  FLUID_MOD_CONCAVE(4),
  FLUID_MOD_CONVEX(8),
  FLUID_MOD_SWITCH(12),
  FLUID_MOD_CC(16);

  static const FLUID_MOD_UNIPOLAR = FLUID_MOD_POSITIVE;
  static const FLUID_MOD_LINEAR = FLUID_MOD_POSITIVE;
  static const FLUID_MOD_GC = FLUID_MOD_POSITIVE;

  final int value;
  const fluid_mod_flags(this.value);

  static fluid_mod_flags fromValue(int value) => switch (value) {
        0 => FLUID_MOD_POSITIVE,
        1 => FLUID_MOD_NEGATIVE,
        2 => FLUID_MOD_BIPOLAR,
        4 => FLUID_MOD_CONCAVE,
        8 => FLUID_MOD_CONVEX,
        12 => FLUID_MOD_SWITCH,
        16 => FLUID_MOD_CC,
        _ => throw ArgumentError("Unknown value for fluid_mod_flags: $value"),
      };

  @override
  String toString() {
    if (this == FLUID_MOD_POSITIVE)
      return "fluid_mod_flags.FLUID_MOD_POSITIVE, fluid_mod_flags.FLUID_MOD_UNIPOLAR, fluid_mod_flags.FLUID_MOD_LINEAR, fluid_mod_flags.FLUID_MOD_GC";
    return super.toString();
  }
}

enum fluid_mod_src {
  FLUID_MOD_NONE(0),
  FLUID_MOD_VELOCITY(2),
  FLUID_MOD_KEY(3),
  FLUID_MOD_KEYPRESSURE(10),
  FLUID_MOD_CHANNELPRESSURE(13),
  FLUID_MOD_PITCHWHEEL(14),
  FLUID_MOD_PITCHWHEELSENS(16);

  final int value;
  const fluid_mod_src(this.value);

  static fluid_mod_src fromValue(int value) => switch (value) {
        0 => FLUID_MOD_NONE,
        2 => FLUID_MOD_VELOCITY,
        3 => FLUID_MOD_KEY,
        10 => FLUID_MOD_KEYPRESSURE,
        13 => FLUID_MOD_CHANNELPRESSURE,
        14 => FLUID_MOD_PITCHWHEEL,
        16 => FLUID_MOD_PITCHWHEELSENS,
        _ => throw ArgumentError("Unknown value for fluid_mod_src: $value"),
      };
}

/// Generator (effect) numbers (Soundfont 2.01 specifications section 8.1.3)
enum fluid_gen_type {
  /// < Sample start address offset (0-32767)
  GEN_STARTADDROFS(0),

  /// < Sample end address offset (-32767-0)
  GEN_ENDADDROFS(1),

  /// < Sample loop start address offset (-32767-32767)
  GEN_STARTLOOPADDROFS(2),

  /// < Sample loop end address offset (-32767-32767)
  GEN_ENDLOOPADDROFS(3),

  /// < Sample start address coarse offset (X 32768)
  GEN_STARTADDRCOARSEOFS(4),

  /// < Modulation LFO to pitch
  GEN_MODLFOTOPITCH(5),

  /// < Vibrato LFO to pitch
  GEN_VIBLFOTOPITCH(6),

  /// < Modulation envelope to pitch
  GEN_MODENVTOPITCH(7),

  /// < Filter cutoff
  GEN_FILTERFC(8),

  /// < Filter Q
  GEN_FILTERQ(9),

  /// < Modulation LFO to filter cutoff
  GEN_MODLFOTOFILTERFC(10),

  /// < Modulation envelope to filter cutoff
  GEN_MODENVTOFILTERFC(11),

  /// < Sample end address coarse offset (X 32768)
  GEN_ENDADDRCOARSEOFS(12),

  /// < Modulation LFO to volume
  GEN_MODLFOTOVOL(13),

  /// < Unused
  GEN_UNUSED1(14),

  /// < Chorus send amount
  GEN_CHORUSSEND(15),

  /// < Reverb send amount
  GEN_REVERBSEND(16),

  /// < Stereo panning
  GEN_PAN(17),

  /// < Unused
  GEN_UNUSED2(18),

  /// < Unused
  GEN_UNUSED3(19),

  /// < Unused
  GEN_UNUSED4(20),

  /// < Modulation LFO delay
  GEN_MODLFODELAY(21),

  /// < Modulation LFO frequency
  GEN_MODLFOFREQ(22),

  /// < Vibrato LFO delay
  GEN_VIBLFODELAY(23),

  /// < Vibrato LFO frequency
  GEN_VIBLFOFREQ(24),

  /// < Modulation envelope delay
  GEN_MODENVDELAY(25),

  /// < Modulation envelope attack
  GEN_MODENVATTACK(26),

  /// < Modulation envelope hold
  GEN_MODENVHOLD(27),

  /// < Modulation envelope decay
  GEN_MODENVDECAY(28),

  /// < Modulation envelope sustain
  GEN_MODENVSUSTAIN(29),

  /// < Modulation envelope release
  GEN_MODENVRELEASE(30),

  /// < Key to modulation envelope hold
  GEN_KEYTOMODENVHOLD(31),

  /// < Key to modulation envelope decay
  GEN_KEYTOMODENVDECAY(32),

  /// < Volume envelope delay
  GEN_VOLENVDELAY(33),

  /// < Volume envelope attack
  GEN_VOLENVATTACK(34),

  /// < Volume envelope hold
  GEN_VOLENVHOLD(35),

  /// < Volume envelope decay
  GEN_VOLENVDECAY(36),

  /// < Volume envelope sustain
  GEN_VOLENVSUSTAIN(37),

  /// < Volume envelope release
  GEN_VOLENVRELEASE(38),

  /// < Key to volume envelope hold
  GEN_KEYTOVOLENVHOLD(39),

  /// < Key to volume envelope decay
  GEN_KEYTOVOLENVDECAY(40),

  /// < Instrument ID (shouldn't be set by user)
  GEN_INSTRUMENT(41),

  /// < Reserved
  GEN_RESERVED1(42),

  /// < MIDI note range
  GEN_KEYRANGE(43),

  /// < MIDI velocity range
  GEN_VELRANGE(44),

  /// < Sample start loop address coarse offset (X 32768)
  GEN_STARTLOOPADDRCOARSEOFS(45),

  /// < Fixed MIDI note number
  GEN_KEYNUM(46),

  /// < Fixed MIDI velocity value
  GEN_VELOCITY(47),

  /// < Initial volume attenuation
  GEN_ATTENUATION(48),

  /// < Reserved
  GEN_RESERVED2(49),

  /// < Sample end loop address coarse offset (X 32768)
  GEN_ENDLOOPADDRCOARSEOFS(50),

  /// < Coarse tuning
  GEN_COARSETUNE(51),

  /// < Fine tuning
  GEN_FINETUNE(52),

  /// < Sample ID (shouldn't be set by user)
  GEN_SAMPLEID(53),

  /// < Sample mode flags
  GEN_SAMPLEMODE(54),

  /// < Reserved
  GEN_RESERVED3(55),

  /// < Scale tuning
  GEN_SCALETUNE(56),

  /// < Exclusive class number
  GEN_EXCLUSIVECLASS(57),

  /// < Sample root note override
  GEN_OVERRIDEROOTKEY(58),

  /// < Pitch (NOTE: Not a real SoundFont generator)
  GEN_PITCH(59),

  /// < Value defines the count of generators (#fluid_gen_type)
  GEN_LAST(60);

  final int value;
  const fluid_gen_type(this.value);

  static fluid_gen_type fromValue(int value) => switch (value) {
        0 => GEN_STARTADDROFS,
        1 => GEN_ENDADDROFS,
        2 => GEN_STARTLOOPADDROFS,
        3 => GEN_ENDLOOPADDROFS,
        4 => GEN_STARTADDRCOARSEOFS,
        5 => GEN_MODLFOTOPITCH,
        6 => GEN_VIBLFOTOPITCH,
        7 => GEN_MODENVTOPITCH,
        8 => GEN_FILTERFC,
        9 => GEN_FILTERQ,
        10 => GEN_MODLFOTOFILTERFC,
        11 => GEN_MODENVTOFILTERFC,
        12 => GEN_ENDADDRCOARSEOFS,
        13 => GEN_MODLFOTOVOL,
        14 => GEN_UNUSED1,
        15 => GEN_CHORUSSEND,
        16 => GEN_REVERBSEND,
        17 => GEN_PAN,
        18 => GEN_UNUSED2,
        19 => GEN_UNUSED3,
        20 => GEN_UNUSED4,
        21 => GEN_MODLFODELAY,
        22 => GEN_MODLFOFREQ,
        23 => GEN_VIBLFODELAY,
        24 => GEN_VIBLFOFREQ,
        25 => GEN_MODENVDELAY,
        26 => GEN_MODENVATTACK,
        27 => GEN_MODENVHOLD,
        28 => GEN_MODENVDECAY,
        29 => GEN_MODENVSUSTAIN,
        30 => GEN_MODENVRELEASE,
        31 => GEN_KEYTOMODENVHOLD,
        32 => GEN_KEYTOMODENVDECAY,
        33 => GEN_VOLENVDELAY,
        34 => GEN_VOLENVATTACK,
        35 => GEN_VOLENVHOLD,
        36 => GEN_VOLENVDECAY,
        37 => GEN_VOLENVSUSTAIN,
        38 => GEN_VOLENVRELEASE,
        39 => GEN_KEYTOVOLENVHOLD,
        40 => GEN_KEYTOVOLENVDECAY,
        41 => GEN_INSTRUMENT,
        42 => GEN_RESERVED1,
        43 => GEN_KEYRANGE,
        44 => GEN_VELRANGE,
        45 => GEN_STARTLOOPADDRCOARSEOFS,
        46 => GEN_KEYNUM,
        47 => GEN_VELOCITY,
        48 => GEN_ATTENUATION,
        49 => GEN_RESERVED2,
        50 => GEN_ENDLOOPADDRCOARSEOFS,
        51 => GEN_COARSETUNE,
        52 => GEN_FINETUNE,
        53 => GEN_SAMPLEID,
        54 => GEN_SAMPLEMODE,
        55 => GEN_RESERVED3,
        56 => GEN_SCALETUNE,
        57 => GEN_EXCLUSIVECLASS,
        58 => GEN_OVERRIDEROOTKEY,
        59 => GEN_PITCH,
        60 => GEN_LAST,
        _ => throw ArgumentError("Unknown value for fluid_gen_type: $value"),
      };
}

/// Enum value for 'flags' field of #_fluid_gen_t (not really flags).
enum fluid_gen_flags {
  /// < Generator value is not set
  GEN_UNUSED(0),

  /// < Generator value is set
  GEN_SET(1),

  /// < DOCME
  GEN_ABS_NRPN(2);

  final int value;
  const fluid_gen_flags(this.value);

  static fluid_gen_flags fromValue(int value) => switch (value) {
        0 => GEN_UNUSED,
        1 => GEN_SET,
        2 => GEN_ABS_NRPN,
        _ => throw ArgumentError("Unknown value for fluid_gen_flags: $value"),
      };
}

enum fluid_voice_add_mod {
  FLUID_VOICE_OVERWRITE(0),
  FLUID_VOICE_ADD(1),
  FLUID_VOICE_DEFAULT(2);

  final int value;
  const fluid_voice_add_mod(this.value);

  static fluid_voice_add_mod fromValue(int value) => switch (value) {
        0 => FLUID_VOICE_OVERWRITE,
        1 => FLUID_VOICE_ADD,
        2 => FLUID_VOICE_DEFAULT,
        _ =>
          throw ArgumentError("Unknown value for fluid_voice_add_mod: $value"),
      };
}

enum fluid_status {
  FLUID_OK(0),
  FLUID_FAILED(-1);

  final int value;
  const fluid_status(this.value);

  static fluid_status fromValue(int value) => switch (value) {
        0 => FLUID_OK,
        -1 => FLUID_FAILED,
        _ => throw ArgumentError("Unknown value for fluid_status: $value"),
      };
}

final class _fluid_adriver_definition_t extends ffi.Opaque {}

final class _fluid_client_t extends ffi.Opaque {}

typedef fluid_compare_func_t
    = ffi.Pointer<ffi.NativeFunction<fluid_compare_func_tFunction>>;
typedef fluid_compare_func_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> a, ffi.Pointer<ffi.Void> b);
typedef Dartfluid_compare_func_tFunction = int Function(
    ffi.Pointer<ffi.Void> a, ffi.Pointer<ffi.Void> b);

final class _fluid_revmodel_presets_t extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @fluid_real_t()
  external double roomsize;

  @fluid_real_t()
  external double damp;

  @fluid_real_t()
  external double width;

  @fluid_real_t()
  external double level;
}

final class _fluid_gen_info_t extends ffi.Struct {
  @ffi.Char()
  external int num;

  @ffi.Char()
  external int init;

  @ffi.Char()
  external int nrpn_scale;

  @ffi.Float()
  external double min;

  @ffi.Float()
  external double max;

  @ffi.Float()
  external double def;
}

enum fluid_voice_status {
  FLUID_VOICE_CLEAN(0),
  FLUID_VOICE_ON(1),
  FLUID_VOICE_SUSTAINED(2),
  FLUID_VOICE_OFF(3);

  final int value;
  const fluid_voice_status(this.value);

  static fluid_voice_status fromValue(int value) => switch (value) {
        0 => FLUID_VOICE_CLEAN,
        1 => FLUID_VOICE_ON,
        2 => FLUID_VOICE_SUSTAINED,
        3 => FLUID_VOICE_OFF,
        _ =>
          throw ArgumentError("Unknown value for fluid_voice_status: $value"),
      };
}

enum fluid_voice_envelope_index_t {
  FLUID_VOICE_ENVDELAY(0),
  FLUID_VOICE_ENVATTACK(1),
  FLUID_VOICE_ENVHOLD(2),
  FLUID_VOICE_ENVDECAY(3),
  FLUID_VOICE_ENVSUSTAIN(4),
  FLUID_VOICE_ENVRELEASE(5),
  FLUID_VOICE_ENVFINISHED(6),
  FLUID_VOICE_ENVLAST(7);

  final int value;
  const fluid_voice_envelope_index_t(this.value);

  static fluid_voice_envelope_index_t fromValue(int value) => switch (value) {
        0 => FLUID_VOICE_ENVDELAY,
        1 => FLUID_VOICE_ENVATTACK,
        2 => FLUID_VOICE_ENVHOLD,
        3 => FLUID_VOICE_ENVDECAY,
        4 => FLUID_VOICE_ENVSUSTAIN,
        5 => FLUID_VOICE_ENVRELEASE,
        6 => FLUID_VOICE_ENVFINISHED,
        7 => FLUID_VOICE_ENVLAST,
        _ => throw ArgumentError(
            "Unknown value for fluid_voice_envelope_index_t: $value"),
      };
}

enum fluid_debug_level {
  FLUID_DBG_DRIVER(1);

  final int value;
  const fluid_debug_level(this.value);

  static fluid_debug_level fromValue(int value) => switch (value) {
        1 => FLUID_DBG_DRIVER,
        _ => throw ArgumentError("Unknown value for fluid_debug_level: $value"),
      };
}

/// ENUM
enum fluid_loop {
  FLUID_UNLOOPED(0),
  FLUID_LOOP_DURING_RELEASE(1),
  FLUID_NOTUSED(2),
  FLUID_LOOP_UNTIL_RELEASE(3);

  final int value;
  const fluid_loop(this.value);

  static fluid_loop fromValue(int value) => switch (value) {
        0 => FLUID_UNLOOPED,
        1 => FLUID_LOOP_DURING_RELEASE,
        2 => FLUID_NOTUSED,
        3 => FLUID_LOOP_UNTIL_RELEASE,
        _ => throw ArgumentError("Unknown value for fluid_loop: $value"),
      };
}

enum fluid_synth_status {
  FLUID_SYNTH_CLEAN(0),
  FLUID_SYNTH_PLAYING(1),
  FLUID_SYNTH_QUIET(2),
  FLUID_SYNTH_STOPPED(3);

  final int value;
  const fluid_synth_status(this.value);

  static fluid_synth_status fromValue(int value) => switch (value) {
        0 => FLUID_SYNTH_CLEAN,
        1 => FLUID_SYNTH_PLAYING,
        2 => FLUID_SYNTH_QUIET,
        3 => FLUID_SYNTH_STOPPED,
        _ =>
          throw ArgumentError("Unknown value for fluid_synth_status: $value"),
      };
}

final class _fluid_bank_offset_t extends ffi.Struct {
  @ffi.Int()
  external int sfont_id;

  @ffi.Int()
  external int offset;
}

typedef fluid_bank_offset_t = _fluid_bank_offset_t;

const int FLUID_PRESET_SELECTED = 0;

const int FLUID_PRESET_UNSELECTED = 1;

const int FLUID_SAMPLE_DONE = 2;

const int FLUID_PROF_WRITE_S16 = 0;

const int FLUID_PROF_ONE_BLOCK = 1;

const int FLUID_PROF_ONE_BLOCK_CLEAR = 2;

const int FLUID_PROF_ONE_BLOCK_VOICE = 3;

const int FLUID_PROF_ONE_BLOCK_VOICES = 4;

const int FLUID_PROF_ONE_BLOCK_REVERB = 5;

const int FLUID_PROF_ONE_BLOCK_CHORUS = 6;

const int FLUID_PROF_VOICE_NOTE = 7;

const int FLUID_PROF_VOICE_RELEASE = 8;

const int FLUID_PROF_LAST = 9;

const int DEBUG = 1;

const String VERSION = '1.2.2';

const int SF3_DISABLED = 0;

const int SF3_XIPH_VORBIS = 1;

const int SF3_STB_VORBIS = 2;

const int SF3_SUPPORT = 1;

const int HAVE_STRING_H = 1;

const int HAVE_STDLIB_H = 1;

const int HAVE_STDIO_H = 1;

const int HAVE_STDARG_H = 1;

const int HAVE_MATH_H = 1;

const int HAVE_LIMITS_H = 1;

const int HAVE_FCNTL_H = 1;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const double INFINITY = double.infinity;

const int FP_NAN = 1;

const int FP_INFINITE = 2;

const int FP_ZERO = 3;

const int FP_NORMAL = 4;

const int FP_SUBNORMAL = 5;

const int FP_SUPERNORMAL = 6;

const int FP_FAST_FMA = 1;

const int FP_FAST_FMAF = 1;

const int FP_FAST_FMAL = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const double MAXFLOAT = 3.4028234663852886e+38;

const int FP_SNAN = 1;

const int FP_QNAN = 1;

const double HUGE = 3.4028234663852886e+38;

const double X_TLOSS = 14148475504056880.0;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int O_EXEC = 1073741824;

const int O_SEARCH = 1074790400;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int AT_SYMLINK_NOFOLLOW_ANY = 2048;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int O_DP_AUTHENTICATE = 4;

const int AUTH_OPEN_NOAUTHFD = -1;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_OFD_SETLK = 90;

const int F_OFD_SETLKW = 91;

const int F_OFD_GETLK = 92;

const int F_OFD_SETLKWTIMEOUT = 93;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int F_SETLEASE = 106;

const int F_GETLEASE = 107;

const int F_TRANSFEREXTENTS = 110;

const int F_ATTRIBUTION_TAG = 111;

const int F_ADDSIGS_MAIN_BINARY = 113;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_ALLOCATEPERSIST = 8;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int ATTRIBUTION_NAME_MAX = 255;

const int F_CREATE_TAG = 1;

const int F_DELETE_TAG = 2;

const int F_QUERY_TAG = 4;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

const int __DARWIN_CLK_TCK = 100;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int CHAR_BIT = 8;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 16384;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int FLUID_HINT_BOUNDED_BELOW = 1;

const int FLUID_HINT_BOUNDED_ABOVE = 2;

const int FLUID_HINT_TOGGLED = 4;

const int FLUID_HINT_SAMPLE_RATE = 8;

const int FLUID_HINT_LOGARITHMIC = 16;

const int FLUID_HINT_INTEGER = 32;

const int FLUID_HINT_FILENAME = 1;

const int FLUID_HINT_OPTIONLIST = 2;

const double FLUID_REVERB_DEFAULT_ROOMSIZE = 0.20000000298023224;

const double FLUID_REVERB_DEFAULT_DAMP = 0.0;

const double FLUID_REVERB_DEFAULT_WIDTH = 0.5;

const double FLUID_REVERB_DEFAULT_LEVEL = 0.8999999761581421;

const int FLUID_CHORUS_DEFAULT_N = 3;

const double FLUID_CHORUS_DEFAULT_LEVEL = 2.0;

const double FLUID_CHORUS_DEFAULT_SPEED = 0.30000001192092896;

const double FLUID_CHORUS_DEFAULT_DEPTH = 8.0;

const int FLUID_CHORUS_DEFAULT_TYPE = 0;

const int FLUID_SAMPLETYPE_MONO = 1;

const int FLUID_SAMPLETYPE_RIGHT = 2;

const int FLUID_SAMPLETYPE_LEFT = 4;

const int FLUID_SAMPLETYPE_LINKED = 8;

const int FLUID_SAMPLETYPE_OGG_VORBIS = 16;

const int FLUID_SAMPLETYPE_OGG_VORBIS_UNPACKED = 32;

const int FLUID_SAMPLETYPE_ROM = 32768;

const int FLUID_NUM_MOD = 64;

const String FLUIDLITE_VERSION = '1.2.2';

const int FLUIDLITE_VERSION_MAJOR = 1;

const int FLUIDLITE_VERSION_MINOR = 2;

const int FLUIDLITE_VERSION_MICRO = 2;

const int FLUID_BUFSIZE = 64;

const double PI = 3.141592654;

const int FLUID_INTERP_BITS = 8;

const int FLUID_INTERP_BITS_MASK = 4278190080;

const int FLUID_INTERP_BITS_SHIFT = 24;

const int FLUID_INTERP_MAX = 256;

const double FLUID_FRACT_MAX = 4294967296.0;

const int FLUID_CENTS_HZ_SIZE = 1200;

const int FLUID_VEL_CB_SIZE = 128;

const int FLUID_CB_AMP_SIZE = 961;

const int FLUID_ATTEN_AMP_SIZE = 1441;

const int FLUID_PAN_SIZE = 1002;

const double FLUID_ATTEN_POWER_FACTOR = -200.0;

const int NO_CHANNEL = 255;

const int FLUID_SAMPLESANITY_CHECK = 1;

const int FLUID_SAMPLESANITY_STARTUP = 2;

const int FLUID_NUM_PROGRAMS = 128;

const int DRUM_INST_BANK = 128;
